--alter table jsec_role add (in_directory number(1));
--alter table FACILITY add (ORIENTATION VARCHAR2(5));
-- alter table table_name add (colName colType,colName colType,colName colType)

--SELECT min(id) minimum, max(id) maximum from Sensor;
SELECT min(id) minimum, max(id) maximum from Mat_Samples;
SELECT min(id) minimum, max(id) maximum from Layer;
SELECT min(id) minimum, max(id) maximum from Material;
SELECT min(id) minimum, max(id) maximum from Lane;
SELECT min(id) minimum, max(id) maximum from Cell;
SELECT min(id) minimum, max(id) maximum from Road_Section;
SELECT min(id) minimum, max(id) maximum from Facility;


grant select on mat_samples to mnroad
grant select on material to mnroad;
grant select on lane to mnroad;
grant select on road_section to mnroad;
grant select on facility to mnroad;
grant select on layer to mnroad;
grant select on transverse_joint to mnroad;
--
DROP TABLE JSEC_ROLE_PERMISSION_REL PURGE;
DROP TABLE JSEC_USER_PERMISSION_REL PURGE;
DROP TABLE JSEC_PERMISSION PURGE;
DROP TABLE JSEC_USER_ROLE_REL PURGE;
DROP TABLE JSEC_USER PURGE;
DROP TABLE JSEC_ROLE PURGE;

grant select,insert,delete,update on JSEC_ROLE_PERMISSION_REL to mnru;
grant select,insert,delete,update on JSEC_USER_PERMISSION_REL to mnru;
grant select,insert,delete,update on JSEC_PERMISSION to mnru;
grant select,insert,delete,update on JSEC_USER_ROLE_REL to mnru;
grant select,insert,delete,update on JSEC_USER to mnru;
grant select,insert,delete,update on JSEC_ROLE to mnru;
--
--DROP TABLE SENSOR PURGE;
--DROP TABLE MAT_SAMPLES PURGE;
--DROP TABLE LAYER PURGE;
--DROP TABLE MATERIAL PURGE;
--DROP TABLE LANE PURGE;
--DROP TABLE CELL PURGE;
--DROP TABLE ROAD_SECTION PURGE;
--DROP TABLE FACILITY PURGE;
CREATE SEQUENCE PICKLIST_ID_SEQ MINVALUE 1 START WITH 11 INCREMENT BY 1;
SELECT 'CREATE SEQUENCE MNROAD_ID_SEQ MINVALUE 1 START WITH ' || MNROAD_ID_SEQ.NEXTVAL || ' INCREMENT BY 1 CACHE 20;' FROM DUAL;
DROP SEQUENCE MNROAD_ID_SEQ;

SELECT 'CREATE SEQUENCE MNROAD_ID_SEQ MINVALUE 1 START WITH ' || MNROAD_ID_SEQ.NEXTVAL || ' INCREMENT BY 1 CACHE 20;' FROM DUAL;



--
CREATE TABLE APP_CONFIG
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   NAME varchar2(30) NOT NULL,
   PARAMETER varchar2(25) NOT NULL,
   STATUS varchar2(10) NOT NULL,
   VAL varchar2(4000)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
CREATE TABLE FACILITY
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   NAME VARCHAR2(400) NOT NULL,
   DESCRIPTION VARCHAR2(400) NOT NULL,
   DATE_CREATED  TIMESTAMP NOT NULL,
   LAST_UPDATED  TIMESTAMP NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--
CREATE TABLE ROAD_SECTION
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   DESCRIPTION VARCHAR2(400) NOT NULL,
   FACILITY_ID NUMBER(19) NOT NULL,
   START_STATION NUMBER(8,2) NOT NULL,
   END_STATION NUMBER(8,2) NOT NULL,
   DATE_CREATED  TIMESTAMP NOT NULL,
   LAST_UPDATED  TIMESTAMP NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--
ALTER TABLE ROAD_SECTION
   ADD CONSTRAINT FACILITY_FK
   FOREIGN KEY (FACILITY_ID)
   REFERENCES FACILITY(ID)
;

CREATE TABLE CELL
(
   ID                       NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION                  NUMBER(19) NOT NULL,
   CLASS                    VARCHAR2(255) NOT NULL,
   CELL_NUMBER              NUMBER(10) NOT NULL,
   CONSTRUCTION_ENDED_DATE  DATE NOT NULL,
   DEMOLISHED_DATE          DATE,
   DESIGN_LIFE              NUMBER(10),
   DRAINAGE_SYSTEM          VARCHAR2(255) NOT NULL,
   CELL_END_STATION         NUMBER(16,8),
   END_STATION              NUMBER(16,8) NOT NULL,
   NAME                     VARCHAR2(255) NOT NULL,
   ROAD_SECTION_ID          NUMBER(19) NOT NULL,
   CELL_START_STATION       NUMBER(16,8),
   START_STATION            NUMBER(16,8) NOT NULL,
   SUBSUMED_BY              VARCHAR2(500),
   DATE_CREATED             timestamp NOT NULL,
   LAST_UPDATED             timestamp NOT NULL,
   SHOULDER_TYPE            VARCHAR2(15),
   TIEBARS                  NUMBER(1),
   SURFACE_TEXTURE          VARCHAR2(255),
   HMA_DESIGN               VARCHAR2(255),
   MNDOT_MIX_SPECIFICATION  VARCHAR2(255)

)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE CELL
    ADD CONSTRAINT ROAD_SECTION_FK
    FOREIGN KEY (ROAD_SECTION_ID)
    REFERENCES ROAD_SECTION(ID)
;
--

select
--c.cell_number,
--'update lane set offset_ref=''-'' where id='||l.id||';'
'update lane set offset_ref=''+'' where id='||l.id||';'
from facility f  join road_section r on r.facility_id=f.id join cell c on c.road_section_id = r.id join lane l on l.cell_id=c.id
where (f.name = 'Mainline')
--where (f.name = 'Low Volume Road')
--where (f.name = 'Farm Road')
--where (f.name = 'Public Road')
--where (f.name = 'MnRoad Parking Lot')
--where (f.name = 'MnRoad Sidewalk')
--and (l.name='Driving' or l.name='Left Shldr')
and (l.name='Passing 1' or l.name='Right Shldr')
order by c.id, l.id, cell_number,lane_num

update sensor
set SENSOR_DEPTH_IN = abs(SENSOR_DEPTH_IN)
where SENSOR_DEPTH_IN < 0

-- Mainline passing lane sensors
SELECT * FROM sensor where
(cell between 1 and 23
or cell between 50 and 51
or cell between 60 and 63
or cell between 92 and 97
or cell in (105,106,113,114,205,206,213,214,305,313,314,405,413,414,513,514,614,714,814,914)
) and offset_ft > 0
order by cell,model,seq

CREATE TABLE LANE
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION      NUMBER(19) NOT NULL,
   CELL_ID      NUMBER(19) NOT NULL,
   LANE_NUM     NUMBER(10) NOT NULL,
   NAME         VARCHAR2(11) NOT NULL,
   WIDTH        NUMBER(10) NOT NULL,
   OFFSET_REF   VARCHAR2(1),
   PANEL_LENGTH FLOAT(126),
   PANEL_WIDTH  FLOAT(126),
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE LANE
    ADD CONSTRAINT CELL_FK
    FOREIGN KEY (CELL_ID)
    REFERENCES CELL(ID)
;
--
--DROP TABLE TRANSVERSE_JOINT PURGE;
CREATE TABLE TRANSVERSE_JOINT
(
   CELL_ID NUMBER(22),
   CELL NUMBER(3),
   STATION NUMBER(12,2),
   JOINT_NUMBER NUMBER(5),
   SEALANT_TYPE char(8),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(22) NOT NULL,
   LAST_UPDATED timestamp,
   DATE_CREATED timestamp,
   CREATED_BY varchar2(10),
   LAST_UPDATED_BY varchar2(10)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
;
ALTER TABLE TRANSVERSE_JOINT
    ADD CONSTRAINT CELL_TJ_FK
    FOREIGN KEY (CELL_ID)
    REFERENCES CELL(ID)
;
--
CREATE TABLE DOWEL_BAR
(
   TR_JOINT_ID NUMBER(22) NOT NULL,
   OFFSET_REF char(1) NOT NULL,
   DOWEL_NUMBER varchar2(12) NOT NULL,
   EMBEDMENT_LENGTH_IN NUMBER(5,2),
   TRANSVERSE_OFFSET_IN NUMBER(8,2),
   DIAMETER_WIDTH NUMBER(8,2),
   LENGTH NUMBER(3),
   TYPE varchar2(255),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(22) NOT NULL,
   DATE_CREATED TIMESTAMP, 
   LAST_UPDATED TIMESTAMP,
   CREATED_BY VARCHAR2(10),
   LAST_UPDATED_BY VARCHAR2(10)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--
ALTER TABLE DOWEL_BAR
    ADD CONSTRAINT TR_JOINT_DB_FK
    FOREIGN KEY (TRANSVERSE_JOINT_ID)
    REFERENCES TRANSVERSE_JOINT(ID)
;
--
CREATE TABLE LAYER
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   CONSTRUCT_END_DATE  DATE,
   CONSTRUCT_START_DATE  DATE NOT NULL,
   LANE_ID NUMBER(19),
   LAYER_NUM NUMBER(2) NOT NULL,
   MATERIAL_ID number(19) NOT NULL,
   THICKNESS NUMBER(8,3) NOT NULL,
   FIBER_TYPE VARCHAR2(20 CHAR),
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE LAYER
    ADD CONSTRAINT LANE_FK
    FOREIGN KEY (LANE_ID)
    REFERENCES LANE(ID)
;
--
CREATE TABLE MATERIAL
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   BASIC_MATERIAL VARCHAR2(255),
   DESCRIPTION VARCHAR2(255),
   MN_DOT_SPEC_NUMBER VARCHAR2(10),
   SPEC_YEAR NUMBER(10),
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL
   BINDER varchar2(10),
   MODIFIER varchar2(250),
   FIBER_TYPE varchar2(30),
   DESIGN_LEVEL varchar2(20),
   COURSE varchar2(10),
   PERCENT_RAP NUMBER(10),
   GRADATION_NAME VARCHAR(50),
--
   COMPONENT_MODIFICATION VARCHAR2(255),
   DISPLAY_NAME VARCHAR2(255),
   PROCESS_MODIFICATION VARCHAR2(255)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--DROP TABLE MAT_SAMPLES PURGE;
--CREATE TABLE MAT_SAMPLES
--(
--   MNROAD_ID VARCHAR2(11) NOT NULL,
--   CELL NUMBER(10),
--   STATION float(126),
--   OFFSET float(126),
--   FIELD_ID VARCHAR2(25),
--   ID NUMBER(19) PRIMARY KEY NOT NULL,
--   VERSION NUMBER(19) NOT NULL,
--   COMMENTS VARCHAR2(250),
--   CONTACT_PERSON VARCHAR2(24),
--   CONTAINER_TYPE VARCHAR2(30),
--   COURSE VARCHAR2(8),
--   DEPTH_CODE VARCHAR2(40),
--   LIFT_NUMBER NUMBER(10),
--   MATERIAL_GROUP VARCHAR2(40),
--   PIECE_NUMBER NUMBER(10),
--   SAMPLE_CURE_TIME float(126),
--   SAMPLE_DATE timestamp,
--   SAMPLE_DEPTH_BOTTOM float(126),
--   SAMPLE_DEPTH_TOP float(126),
--   SAMPLE_TIME VARCHAR2(30),
--   SPEC VARCHAR2(15),
--   STORAGE_LOCATION VARCHAR2(50),
--   TAKEN_FROM_LAYER_ID NUMBER(19),
--   TESTPAD_OFFSET_STATION float(126),
--   TESTPAD_STATION float(126),
--   USER_INIT VARCHAR2(10),
--   DATE_CREATED timestamp NOT NULL,
--   LAST_UPDATED timestamp NOT NULL,
--   WHERE_RESULTS VARCHAR2(200)
--)
--
--DROP TABLE MATERIAL_MAT_SAMPLES purge;
--DROP TABLE MAT_SAMPLES PURGE;
CREATE TABLE MAT_SAMPLES
(
   MNROAD_ID VARCHAR2(11) NOT NULL,
   CELL NUMBER(10),
   STATION NUMBER(16,8),
   OFFSET NUMBER(8,2),
   SAMPLE_DATE timestamp,
   MATERIAL_GROUP VARCHAR2(40),
   CONTAINER_TYPE VARCHAR2(30),
   STORAGE_LOCATION VARCHAR2(50),
   COMMENTS VARCHAR2(250),
   FIELD_ID VARCHAR2(25),
   CONTACT_PERSON VARCHAR2(24),
   COURSE VARCHAR2(8),
   LIFT_NUMBER NUMBER(10),
   DEPTH_CODE VARCHAR2(40),
   SAMPLE_DEPTH_TOP NUMBER(8,2),
   SAMPLE_DEPTH_BOTTOM NUMBER(8,2),
   SAMPLE_TIME VARCHAR2(30),
   SAMPLE_CURE_TIME NUMBER(7,2),
   SPEC VARCHAR2(15),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
-- SELECT MNROAD_ID from MAT_SAMPLES GROUP BY MNROAD_ID HAVING COUNT(*) > 1
create unique index MNROAD_ID_UIDX on MAT_SAMPLES (MNROAD_ID) tablespace MDIX01;
ALTER TABLE MAT_SAMPLES
ADD CONSTRAINT FK1FED2C2A93981377
FOREIGN KEY (TAKEN_FROM_LAYER_ID)
REFERENCES LAYER(ID) ON DELETE CASCADE
--
--DROP TABLE SENSOR_EVALUATION PURGE;
--DROP TABLE SENSOR PURGE;
--DROP TABLE SENSOR_MODEL PURGE;
--
CREATE TABLE SENSOR_MODEL
(
   MODEL varchar2(3),
   DESCRIPTION varchar2(200),
   COMMENTS varchar2(2000),
   MEASUREMENT_TYPE varchar2(40),
   DATA_VALUES_TABLE varchar2(40),
   MODEL_NUM varchar2(40),
   MEASUREMENT_UNITS varchar2(30),
   MIN_POSSIBLE_VALUE NUMBER(15,5),
   MAX_POSSIBLE_VALUE NUMBER(15,5),
   MIN_EXPECTED_VALUE NUMBER(15,5),
   MAX_EXPECTED_VALUE NUMBER(15,5),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--alter table SENSOR_MODEL modify ( MEASUREMENT_UNITS varchar2(30));

--
CREATE TABLE SENSOR
(
 CELL                       NUMBER(3)    NOT NULL
 , MODEL                    VARCHAR2(3)  NOT NULL
 , SEQ                      NUMBER(3)    NOT NULL
 , DESCRIPTION              VARCHAR2(255)
 , DATE_INSTALLED           DATE
 , DATE_REMOVED             DATE
 , CABINET                  VARCHAR2(4)
 , STATION_FT               NUMBER(16,8)
 , OFFSET_FT                NUMBER(7, 2)
 , NORTHING_FT              NUMBER(10, 3)
 , EASTING_FT               NUMBER(10, 3)
 , PAVE_ELEV_FT             NUMBER(7, 3)
 , SENSOR_ELEV_FT           NUMBER(7, 3)
 , SENSOR_DEPTH_IN          NUMBER(8, 3)
 , ORIENTATION              VARCHAR2(13)
 , COLLECTION_TYPE          VARCHAR2(8)
 , DYNAMIC_STATIC           CHAR(1)
 , LAST_UPDATED             TIMESTAMP
 , DATE_CREATED             TIMESTAMP
 , COMMENTS                 VARCHAR2(255)
 , ID NUMBER(19)            PRIMARY KEY NOT NULL
 , VERSION                  NUMBER(19) NOT NULL
 , SENSOR_MODEL_ID          NUMBER(19) NOT NULL
 , SENSOR_ID                VARCHAR2(20) NOT NULL
 -- TO BE REMOVED
 -- LOCATION_MATERIAL replace as part of sensors set in layer
 , LOCATION_MATERIAL        VARCHAR2(40)
 -- LOCATION_GROUP: Depth category, generate from SENSOR_DEPTH_IN
 , LOCATION_GROUP           NUMBER(2)
-- CURRENT_STATUS replace by most recent sensor_evaluation
  , CURRENT_STATUS           VARCHAR2(20)
-- LOCATION_LAYER replace as part of sensors set in layer
 , LOCATION_LAYER           VARCHAR2(15)
 , LAYER_ID                 NUMBER(19)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
CREATE INDEX SENSOR_SEQ_BIDX ON SENSOR(SEQ) tablespace MDIX01;
CREATE INDEX SENSOR_MODEL_BIDX ON SENSOR(MODEL) tablespace MDIX01;
CREATE INDEX SENSOR_CELL_BIDX ON SENSOR(CELL) tablespace MDIX01;
ALTER TABLE SENSOR
ADD CONSTRAINT SENSOR_MODEL
FOREIGN KEY (SENSOR_MODEL_ID)
REFERENCES SENSOR_MODEL(ID);
--
CREATE TABLE SENSOR_STATUS
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   CELL NUMBER(3) NOT NULL,
   MODEL varchar2(3) NOT NULL,
   SEQ NUMBER(3) NOT NULL,
   DATE_INSTALLED DATE,
   DATE_REMOVED DATE,
   DYNAMIC_STATIC VARCHAR(1),
   STATUS_DATE DATE NOT NULL,
   TABLE_NAME VARCHAR(30) NOT NULL,
-- a null SENSOR_READING_COUNT indicates table not found
   SENSOR_READING_COUNT NUMBER(10)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;

--
CREATE TABLE SENSOR_EVALUATION
(
-- Natural Key: CELL,MODEL,SEQ,DATE_COMMENT
 SENSOR_ID             NUMBER(19)    NOT NULL
-- CELL                    NUMBER(3)    NOT NULL
-- , MODEL                 VARCHAR2(3)  NOT NULL
-- , SEQ                   NUMBER(3)    NOT NULL
 , DATE_COMMENT          DATE         NOT NULL
 , COMMENT_BY            VARCHAR2(50) NOT NULL
 , EVALUATION_METHOD     VARCHAR2(20)
--EVALUATION_METHOD ['Calibration','Load Response','Electronic Check','Data_User']
 , RESULT                VARCHAR2(20)
-- RESULT ['Good', 'Questionable', 'Dead']
-- ['RELIABLE','BAD','RETEST','NOT CONNECTED','DEAD','DISCONTINUED','REMOVED','Questionable']
 , REASON                VARCHAR2(200)
-- , EVAL_COMMENT          VARCHAR2(200) NOT NULL
 , LAST_UPDATED          TIMESTAMP
 , DATE_CREATED          TIMESTAMP
 , ID                    NUMBER(19)    PRIMARY KEY  NOT NULL
 , VERSION               NUMBER(19)    NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--
ALTER TABLE SENSOR_EVALUATION
ADD CONSTRAINT SENSOR_EVAL
FOREIGN KEY (SENSOR_ID)
REFERENCES SENSOR(ID);
--
  CREATE TABLE "MNR"."PCC_PANEL" 
   (	"ID" NUMBER(19,0) NOT NULL ENABLE, 
	"VERSION" NUMBER(19,0) NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"DATE_CREATED" TIMESTAMP (6) NOT NULL ENABLE, 
	"LAST_UPDATED" TIMESTAMP (6) NOT NULL ENABLE, 
	"LAST_UPDATED_BY" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"LAYER_ID" NUMBER(19,0) NOT NULL ENABLE, 
	"PANEL_LENGTH" FLOAT(126), 
	"PANEL_WIDTH" FLOAT(126), 
	 PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 NOLOGGING COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "MDTB01"  ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS NOLOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT)
  TABLESPACE "MDTB01" ;

CREATE TABLE JSEC_USER
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   PASSWORD_HASH varchar2(255) NOT NULL,
   USERNAME varchar2(255) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
CREATE TABLE JSEC_ROLE
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   NAME varchar2(255) NOT NULL,
   IN_DIRECTORY NUMBER(1)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
CREATE UNIQUE INDEX JSEC_ROLE_NAME ON JSEC_ROLE(NAME)
;
CREATE TABLE JSEC_PERMISSION
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   POSSIBLE_ACTIONS varchar2(255) NOT NULL,
   TYPE varchar2(255) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
CREATE UNIQUE INDEX JSEC_PERM_TYPE ON JSEC_PERMISSION(TYPE)
;
CREATE TABLE JSEC_ROLE_PERMISSION_REL
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   ACTIONS varchar2(255) NOT NULL,
   PERMISSION_ID NUMBER(19) NOT NULL,
   ROLE_ID NUMBER(19) NOT NULL,
   TARGET varchar2(255) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE JSEC_ROLE_PERMISSION_REL
ADD CONSTRAINT FK6DF5807AE3CC60D0
FOREIGN KEY (ROLE_ID)
REFERENCES JSEC_ROLE(ID) ON DELETE CASCADE
;
ALTER TABLE JSEC_ROLE_PERMISSION_REL
ADD CONSTRAINT FK6DF5807AEB28BDB0
FOREIGN KEY (PERMISSION_ID)
REFERENCES JSEC_PERMISSION(ID) ON DELETE CASCADE
;
CREATE TABLE JSEC_USER_PERMISSION_REL
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   ACTIONS varchar2(255) NOT NULL,
   PERMISSION_ID NUMBER(19) NOT NULL,
   TARGET varchar2(255),
   USER_ID NUMBER(19) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE JSEC_USER_PERMISSION_REL
ADD CONSTRAINT FK28FF608588F724B0
FOREIGN KEY (USER_ID)
REFERENCES JSEC_USER(ID) ON DELETE CASCADE
;
ALTER TABLE JSEC_USER_PERMISSION_REL
ADD CONSTRAINT FK28FF6085EB28BDB0
FOREIGN KEY (PERMISSION_ID)
REFERENCES JSEC_PERMISSION(ID) ON DELETE CASCADE
;
CREATE TABLE JSEC_USER_ROLE_REL
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   ROLE_ID NUMBER(19) NOT NULL,
   USER_ID NUMBER(19) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE JSEC_USER_ROLE_REL
ADD CONSTRAINT FK238F64ACE3CC60D0
FOREIGN KEY (ROLE_ID)
REFERENCES JSEC_ROLE(ID) ON DELETE CASCADE
;
ALTER TABLE JSEC_USER_ROLE_REL
ADD CONSTRAINT FK238F64AC88F724B0
FOREIGN KEY (USER_ID)
REFERENCES JSEC_USER(ID) ON DELETE CASCADE
;


DROP SEQUENCE VT_ID_SEQ;
CREATE SEQUENCE VT_ID_SEQ
        MINVALUE 1
        START WITH 1
        INCREMENT BY 1
        CACHE 20;

CREATE TABLE TRACKED_VEHICLE
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   DESCRIPTION VARCHAR(40) NOT NULL,
   -- GPS_MOUNT_ OFFSETS are relative to the center of the front axle
   GPS_MOUNT_LONGITUDINAL_OFFSET NUMBER(8,5),
   GPS_MOUNT_TRANSVERSE_OFFSET NUMBER(8,5),
   -- Axles are numbered from front to back beginning with 1
   -- Minimum 2, Maximum 20
   NUMBER_OF_AXLES NUMBER(2),
   -- TIRE_SPACING_WIDTH_NUMBER_LIST contains a comma separated list of axleSpacing_tireWidth_tireSpacing_numberOfAxleTires
   -- axleSpacing: distance (feet) from previous axle
   -- tireWidth:  width (inches) of tire surface contact
   -- tireSpacing: center to center distance (feet) between outside tires
   -- number: number of tires on the axle
   -- example: Two-Axle, Six-Tire, Single Unit Trucks
   -- front axle: 0.0_8.5_8.2_2,12.3_8.5_10.2_4
   TIRE_SPACING_WIDTH_NUMBER_LIST VARCHAR(400),
   DATE_CREATED  TIMESTAMP NOT NULL,
   LAST_UPDATED  TIMESTAMP NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;

INSERT INTO TRACKED_VEHICLE  (ID, VERSION, DESCRIPTION, GPS_MOUNT_LONGITUDINAL_OFFSET
    , GPS_MOUNT_TRANSVERSE_OFFSET, NUMBER_OF_AXLES, TIRE_SPACING_WIDTH_NUMBER_LIST, DATE_CREATED, LAST_UPDATED, CREATED_BY)
    VALUES(VT_ID_SEQ.NEXTVAL,0,'MnROAD 80k truck', 3.3, 0.0, 5, 'N/A',sysdate,sysdate,'CARR1DEN');

CREATE TABLE VEHICLE_PASS
(
   SPEED NUMBER(6),
   GROSS_WEIGHT NUMBER(8),
   FACILITY_ID NUMBER(19),
   LANE_DESCRIPTION VARCHAR2(20) NOT NULL,
   TRACKED_VEHICLE_ID NUMBER(19) NOT NULL,
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL,
   CREATED_BY varchar2(10),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19),
   DATE_COLLECTED timestamp
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE VEHICLE_PASS
ADD CONSTRAINT FK87022944FD088E5A
FOREIGN KEY (FACILITY_ID)
REFERENCES FACILITY(ID)
;
ALTER TABLE VEHICLE_PASS
ADD CONSTRAINT VEHICLE_PASS_TV
FOREIGN KEY (TRACKED_VEHICLE_ID)
REFERENCES TRACKED_VEHICLE(ID)
;

INSERT INTO VEHICLE_PASS (SPEED,GROSS_WEIGHT,FACILITY_ID,LANE_DESCRIPTION,TRACKED_VEHICLE_ID,DATE_CREATED,LAST_UPDATED,CREATED_BY,ID,VERSION,DATE_COLLECTED)
VALUES (40,80000,632,'Inside',1,{ts '2009-09-01 09:37:53.380'},{ts '2009-09-01 09:37:53.380'},'carr1den',VT_ID_SEQ.NEXTVAL,0,{ts '2009-09-01 00:00:00.000'});

CREATE TABLE VEHICLE_LOCATION
(
   OBS_DATETIME timestamp NOT NULL,
   LATITUDE NUMBER(19,10) NOT NULL,
   LATITUDE_DIRECTION char(1) NOT NULL,
   LONGITUDE NUMBER(19,10) NOT NULL,
   LONGITUDE_DIRECTION char(1) NOT NULL,
   VEHICLE_PASS_ID NUMBER(19) NOT NULL,
   DATE_CREATED timestamp NOT NULL,
   LAST_UPDATED timestamp NOT NULL,
   CREATED_BY varchar2(10),
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
ALTER TABLE VEHICLE_LOCATION
ADD CONSTRAINT VEHICLE_LOCATION_VP
FOREIGN KEY (VEHICLE_PASS_ID)
REFERENCES VEHICLE_PASS(ID) ON DELETE CASCADE
;


select * from(
SELECT id
    ,to_char(LATITUDE,99.999999) as latitude
    ,to_char(lead(LATITUDE,1,0.0) over (order by id),99.999999) as next_latitude
    ,to_char(LONGITUDE,99.999999)
    ,to_char(lead(LONGITUDE,1,0.0) over (order by id),99.999999) as next_longitude FROM VEHICLE_LOCATION
    ,OBS_DATETIME
    ,VEHICLE_PASS_ID
where vehicle_pass_id=56624
) where latitude <>next_latitude

--DROP TABLE QUERY;
CREATE TABLE QUERY
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   COLUMNS_CLAUSE varchar2(255) NOT NULL,
   FROM_CLAUSE varchar2(255) NOT NULL,
   WHERE_CLAUSE varchar2(255) NOT NULL,
   ORDER_BY_CLAUSE varchar2(255) NOT NULL,
   PICTURE blob,
   LAST_UPDATED timestamp NOT NULL,
   DATE_CREATED timestamp NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;

alter table DYNAMIC_LOAD_TEST_DESCRIPTIONS modify ( TCS_TESTNAME varchar2(30))
drop SEQUENCE DYNAMIC_LOAD_TEST_VALUES_SEQ;
CREATE SEQUENCE DYNAMIC_LOAD_TEST_VALUES_SEQ MINVALUE 1 START WITH 6657256 INCREMENT BY 1 CACHE 20;

--drop TABLE DYNAMIC_LOAD_TEST_DESCRIPTIONS;
CREATE TABLE DYNAMIC_LOAD_TEST_DESCRIPTIONS
(
   CELL              NUMBER(3)    NOT NULL,
   LANE              varchar2(16) NOT NULL,
   TCS_TESTNAME      varchar2(30) NOT NULL,
   TEST_DATE         timestamp    NOT NULL,
   HOUR              NUMBER(2)    NOT NULL,
   MINUTE            NUMBER(2)    NOT NULL,
   CREATED_BY_USER   varchar2(8)  NOT NULL,
   DATE_CREATED      timestamp    NOT NULL,
   TCS_DATASET       varchar2(12),
   SECOND            NUMBER(2),
   TRUCK_FWD_IND     char(1),
   IR_TEMP           NUMBER(22),
   TIRE_OFFSET_IN    NUMBER(6,2),
   VEHICLE_SPEED     NUMBER(3),
   WANDER            char(1),
   DATE_MODIFIED     timestamp,
   MODIFIED_BY_USER  varchar2(8)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;

CREATE TABLE DISTRESS
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   VERSION NUMBER(19) NOT NULL,
   CREATED_BY VARCHAR2(255) NOT NULL,
   LAST_UPDATED_BY VARCHAR2(255) NOT NULL,
   LAST_UPDATED TIMESTAMP NOT NULL,
   DATE_CREATED  TIMESTAMP NOT NULL,
   LANE_ID NUMBER(19) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
;
--
ALTER TABLE DISTRESS
ADD CONSTRAINT DISTRESS_LANE_FK
FOREIGN KEY (LANE_ID)
REFERENCES LANE(ID) ON DELETE CASCADE
;

CREATE TABLE CELL_TABLE_SEQ_DAY
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE
AS
select distinct cell, 'CR_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from CR_VALUES     group by cell,seq union all
select distinct cell, 'CT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from CT_VALUES     group by cell,seq union all
select distinct cell, 'EC_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from EC_VALUES     group by cell,seq union all
select distinct cell, 'ET_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from ET_VALUES     group by cell,seq union all
select distinct cell, 'EW_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from EW_VALUES     group by cell,seq union all
select distinct cell, 'FG_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from FG_VALUES     group by cell,seq union all
select distinct cell, 'FL_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from FL_VALUES     group by cell,seq union all
select distinct cell, 'FP_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from FP_VALUES     group by cell,seq union all
select distinct cell, 'FT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from FT_VALUES     group by cell,seq union all
select distinct cell, 'FW_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from FW_VALUES     group by cell,seq union all
select distinct cell, 'GD_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from GD_VALUES     group by cell,seq union all
select distinct cell, 'HC_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from HC_VALUES     group by cell,seq union all
select distinct cell, 'HD_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from HD_VALUES     group by cell,seq union all
select distinct cell, 'HV_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from HV_VALUES     group by cell,seq union all
select distinct cell, 'KB_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from KB_VALUES     group by cell,seq union all
select distinct cell, 'MC_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from MC_VALUES     group by cell,seq union all
select distinct cell, 'MH_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from MH_VALUES     group by cell,seq union all
select distinct cell, 'MM_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from MM_VALUES     group by cell,seq union all
select distinct cell, 'MT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from MT_VALUES     group by cell,seq union all
select distinct cell, 'NT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from NT_VALUES     group by cell,seq union all
select distinct cell, 'PL_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from PL_VALUES     group by cell,seq union all
select distinct cell, 'PT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from PT_VALUES     group by cell,seq union all
select distinct cell, 'RE_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RE_VALUES     group by cell,seq union all
select distinct cell, 'RG_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RG_VALUES     group by cell,seq union all
select distinct cell, 'RH_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RH_VALUES     group by cell,seq union all
select distinct cell, 'RM_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RM_VALUES     group by cell,seq union all
select distinct cell, 'RP_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RP_VALUES     group by cell,seq union all
select distinct cell, 'RT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RT_VALUES     group by cell,seq union all
select distinct cell, 'RW_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from RW_VALUES     group by cell,seq union all
select distinct cell, 'SW_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from SW_VALUES     group by cell,seq union all
select distinct cell, 'TB_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from TB_VALUES     group by cell,seq union all
select distinct cell, 'TD_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from TD_VALUES     group by cell,seq union all
select distinct cell, 'TL_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from TL_VALUES     group by cell,seq union all
select distinct cell, 'TM_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from TM_VALUES     group by cell,seq union all
select distinct cell, 'TT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from TT_VALUES     group by cell,seq union all
select distinct cell, 'VG_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from VG_VALUES     group by cell,seq union all
select distinct cell, 'VM_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from VM_VALUES     group by cell,seq union all
select distinct cell, 'XB_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XB_VALUES     group by cell,seq union all
select distinct cell, 'XG_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XG_VALUES     group by cell,seq union all
select distinct cell, 'XH_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XH_VALUES     group by cell,seq union all
select distinct cell, 'XL_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XL_VALUES     group by cell,seq union all
select distinct cell, 'XM_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XM_VALUES     group by cell,seq union all
select distinct cell, 'XS_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XS_VALUES     group by cell,seq union all
select distinct cell, 'XT_VALUES'     table_name, seq, min(day) from_day, max(day) to_day from XT_VALUES     group by cell,seq union all
select distinct cell, 'TC_VALUES_ALL' table_name, seq, min(day) from_day, max(day) to_day from TC_VALUES_ALL group by cell,seq union all
select distinct cell, 'VW_VALUES_ALL' table_name, seq, min(day) from_day, max(day) to_day from VW_VALUES_ALL group by cell,seq union all
select distinct cell, 'WM_VALUES_ALL' table_name, seq, min(day) from_day, max(day) to_day from WM_VALUES_ALL group by cell,seq union all
select distinct cell, 'XV_VALUES_ALL' table_name, seq, min(day) from_day, max(day) to_day from XV_VALUES_ALL group by cell,seq
order by cell,seq;

alter table CELL_TABLE_SEQ_DAY add (DATE_INSTALLED DATE, DATE_REMOVED DATE)

select 'UPDATE CELL_TABLE_SEQ_DAY SET DATE_INSTALLED='''||s.DATE_INSTALLED||''' WHERE CELL='||c.cell||' AND TABLE_NAME='''||s.model||'_VALUES'' AND SEQ='||c.seq ||';' CODE
from CELL_TABLE_SEQ_DAY c join sensor s on c.cell=s.cell and c.seq = s.seq and substr(c.table_name,1,2)=s.model
WHERE S.DATE_INSTALLED IS NOT NULL
order by c.cell,s.model,c.seq

select 'UPDATE CELL_TABLE_SEQ_DAY SET DATE_REMOVED='''||s.DATE_REMOVED||''' WHERE CELL='||c.cell||' AND TABLE_NAME='''||s.model||'_VALUES'' AND SEQ='||c.seq ||';' CODE
from CELL_TABLE_SEQ_DAY c join sensor s on c.cell=s.cell and c.seq = s.seq and substr(c.table_name,1,2)=s.model
WHERE s.DATE_REMOVED IS NOT NULL
order by c.cell,s.model,c.seq

--DROP TABLE CELL_CELL PURGE;
CREATE TABLE CELL_CELL
(
   CELL_COVERED_BY_ID decimal(19),
   CELL_ID decimal(19),
   CELL_COVERS_ID decimal(19)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE;

ALTER TABLE "MNR"."CELL_CELL"
ADD CONSTRAINT "FK_CELL_COVERS"
FOREIGN KEY ("CELL_COVERS_ID")
REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL_CELL"
ADD CONSTRAINT "FK_CELL_CELL"
FOREIGN KEY ("CELL_ID")
REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL_CELL"
ADD CONSTRAINT "FK_CELL_COVERED_BY"
FOREIGN KEY ("CELL_COVERED_BY_ID")
REFERENCES "MNR"."CELL" ("ID") ENABLE;



SELECT * FROM all_constraints WHERE constraint_type = 'R' AND R_OWNER='MNR' AND TABLE_NAME IN ('CELL','CELL_CELL') ;

SELECT DBMS_METADATA.GET_DDL('REF_CONSTRAINT','FK_CELL_COVERS','MNR') FROM DUAL;
SELECT DBMS_METADATA.GET_DDL('REF_CONSTRAINT','FK_CELL_CELL','MNR') FROM DUAL;
SELECT DBMS_METADATA.GET_DDL('REF_CONSTRAINT','FK_CELL_COVERED_BY','MNR') FROM DUAL;
SELECT DBMS_METADATA.GET_DDL('REF_CONSTRAINT','FK_COVERED_BY_CELL','MNR') FROM DUAL;
SELECT DBMS_METADATA.GET_DDL('REF_CONSTRAINT','FK_COVERS_CELL','MNR') FROM DUAL;

ALTER TABLE "MNR"."CELL" ADD CONSTRAINT "FK_COVERS_CELL" FOREIGN KEY ("CELL_COVERS_ID")
    REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL" ADD CONSTRAINT "FK_COVERED_BY_CELL" FOREIGN KEY ("CELL_COVERED_BY_ID")
      REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL_CELL" ADD CONSTRAINT "FK_CELL_COVERED_BY" FOREIGN KEY ("CELL_COVERED_BY_ID")
      REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL_CELL" ADD CONSTRAINT "FK_CELL_CELL" FOREIGN KEY ("CELL_ID")
      REFERENCES "MNR"."CELL" ("ID") ENABLE;
ALTER TABLE "MNR"."CELL_CELL" ADD CONSTRAINT "FK_CELL_COVERS" FOREIGN KEY ("CELL_COVERS_ID")
      REFERENCES "MNR"."CELL" ("ID") ENABLE;

DROP TABLE CELL_DATES;
CREATE TABLE CELL_DATES
(
CELL_OVER       NUMBER(3,0)
,ID_OVER          NUMBER(19)
,FROM_DATE_OVER   DATE
,TO_DATE_OVER     DATE
,CELL_UNDER     NUMBER(3,0)
,ID_UNDER         NUMBER(19)
,FROM_DATE_UNDER  DATE
,TO_DATE_UNDER    DATE
,FROM_STATION     NUMBER(16,4)
,TO_STATION       NUMBER(16,4)
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE;
--DELETE  FROM  CELL_DATES;
INSERT INTO CELL_DATES
SELECT
CELL_OVER
,ID_OVER
,FROM_DATE_OVER
,TO_DATE_OVER
,CELL_UNDER
,ID_UNDER
,FROM_DATE_UNDER
,CASE
                WHEN TO_DATE_UNDER = TO_DATE_OVER
                THEN FROM_DATE_OVER
                ELSE TO_DATE_UNDER
                END
 TO_DATE_UNDER
,FROM_STATION
,TO_STATION
FROM
(
SELECT
(SELECT CELL_NUMBER FROM CELL WHERE ID=UNDER_CELL_ID) CELL_OVER
, UNDER_CELL_ID ID_OVER
, (SELECT CONSTRUCTION_ENDED_DATE FROM CELL WHERE ID=UNDER_CELL_ID) FROM_DATE_OVER
--, NVL((SELECT DEMOLISHED_DATE FROM CELL WHERE ID=UNDER_CELL_ID),SYSDATE) TO_DATE_OVER
, (SELECT DEMOLISHED_DATE FROM CELL WHERE ID=UNDER_CELL_ID) TO_DATE_OVER
, (SELECT CELL_NUMBER FROM CELL WHERE ID=OVER_CELL_ID) CELL_UNDER
, OVER_CELL_ID ID_UNDER
, (SELECT CONSTRUCTION_ENDED_DATE FROM CELL WHERE ID=OVER_CELL_ID) FROM_DATE_UNDER
--, NVL((SELECT DEMOLISHED_DATE FROM CELL WHERE ID=OVER_CELL_ID),SYSDATE) TO_DATE_UNDER
, (SELECT DEMOLISHED_DATE FROM CELL WHERE ID=OVER_CELL_ID) TO_DATE_UNDER
, US.FROM_STATION
, US.TO_STATION
FROM
(SELECT UNIQUE CC2.CELL_ID UNDER_CELL_ID, CC1.CELL_ID OVER_CELL_ID
, CASE
 WHEN (SELECT START_STATION FROM CELL WHERE ID=CC2.CELL_ID) > (SELECT START_STATION FROM CELL WHERE ID=CC1.CELL_ID)
 THEN (SELECT START_STATION FROM CELL WHERE ID=CC2.CELL_ID)
 ELSE (SELECT START_STATION FROM CELL WHERE ID=CC1.CELL_ID)
 END
 FROM_STATION
, CASE
 WHEN (SELECT END_STATION FROM CELL WHERE ID=CC1.CELL_ID)<(SELECT END_STATION FROM CELL WHERE ID=CC2.CELL_ID)
 THEN (SELECT END_STATION FROM CELL WHERE ID=CC1.CELL_ID)
 WHEN (SELECT END_STATION FROM CELL WHERE ID=CC2.CELL_ID)<(SELECT START_STATION FROM CELL WHERE ID=CC1.CELL_ID)
 THEN (SELECT START_STATION FROM CELL WHERE ID=CC1.CELL_ID)
 ELSE (SELECT END_STATION FROM CELL WHERE ID=CC2.CELL_ID)
 END
 TO_STATION
FROM CELL_CELL CC1 JOIN CELL_CELL CC2 ON CC1.CELL_ID=CC2.CELL_COVERED_BY_ID) US
)
ORDER BY ID_OVER
;
INSERT INTO CELL_DATES
SELECT CELL_NUMBER CELL_OVER
, ID ID_OVER
, CONSTRUCTION_ENDED_DATE FROM_DATE_OVER
--, NVL(DEMOLISHED_DATE,SYSDATE) TO_DATE_OVER
, DEMOLISHED_DATE TO_DATE_OVER
, NULL CELL_UNDER
, NULL ID_UNDER
, NULL FROM_DATE_UNDER
, NULL TO_DATE_UNDER
, START_STATION FROM_STATION
, END_STATION TO_STATION
FROM CELL
WHERE ID NOT IN (SELECT ID_OVER FROM CELL_DATES)
AND ID NOT IN (SELECT ID_UNDER FROM CELL_DATES)
ORDER BY ID_OVER
;


CREATE OR REPLACE VIEW CELLS AS
SELECT UNIQUE CELL_OVER CELL
, ID_OVER ID
, FROM_DATE_OVER FROM_DATE
, TO_DATE_OVER TO_DATE
FROM CELL_DATES
UNION ALL
SELECT UNIQUE CELL_UNDER CELL
, ID_UNDER ID
, FROM_DATE_UNDER FROM_DATE
, TO_DATE_UNDER TO_DATE
FROM CELL_DATES
WHERE ID_UNDER IS NOT NULL
ORDER BY CELL,FROM_DATE
;

CREATE OR REPLACE VIEW CELL_STATIONS AS
SELECT
C.CELL,C.ID,C.FROM_DATE,C.TO_DATE,CD.FROM_STATION,CD.TO_STATION
FROM CELLS C JOIN CELL_DATES CD ON CD.ID_OVER = C.ID
UNION ALL
SELECT
C.CELL,C.ID,C.FROM_DATE,C.TO_DATE,CD.FROM_STATION,CD.TO_STATION
FROM CELLS C JOIN CELL_DATES CD ON CD.ID_UNDER = C.ID



-- FIND THE PERIODS BETWEEN CELL INCARNATIONS
CREATE OR REPLACE VIEW CELL_DEAD_DATES AS
SELECT CELL, FROMD+1 FROM_DATE, TOD-1 TO_DATE FROM
(SELECT CELL, TO_DATE FROMD,LEAD(FROM_DATE,1,NULL) OVER (PARTITION BY CELL ORDER BY CELL,FROM_DATE) TOD FROM CELLS)
WHERE FROMD IS NOT NULL AND TOD IS NOT NULL;
-- THEN SEARCH FOR SENSOR READINGS COLLECTED IN THE "DEAD" PERIODS
SELECT CD.CELL, MIN(V.DAY) MIN_DAY, MAX(V.DAY) MAX_DAY, COUNT(*), TO_CHAR(CD.FROM_DATE, 'YYYY-MM-DD') DEAD_FROM_DATE, TO_CHAR(NVL(CD.TO_DATE,SYSDATE),'YYYY-MM-DD') DEAD_TO_DATE FROM CELL_DEAD_DATES CD  JOIN RT_VALUES V ON CD.CELL=V.CELL AND V.DAY BETWEEN CD.FROM_DATE AND NVL(CD.TO_DATE,SYSDATE) GROUP BY CD.CELL, CD.FROM_DATE, CD.TO_DATE;


DROP TABLE CELL_DATES PURGE;
CREATE TABLE CELL_DATES
(
   CELL_ID NUMBER(19),
   CELL NUMBER(10),
   FROM_DATE DATE,
   TO_DATE DATE
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE;
DELETE FROM CELL_DATES;
INSERT INTO CELL_DATES
SELECT ID CELL_ID,CELL_NUMBER CELL,CONSTRUCTION_ENDED_DATE FROM_DATE, DEMOLISHED_DATE TO_DATE
FROM CELL C WHERE DEMOLISHED_DATE IS NOT NULL
UNION ALL
SELECT ID,CELL_NUMBER,CONSTRUCTION_ENDED_DATE FROM_DATE, LEAD(CONSTRUCTION_ENDED_DATE,1,NULL) OVER (PARTITION BY CELL_NUMBER ORDER BY CELL_NUMBER,CONSTRUCTION_ENDED_DATE) TO_DATE
FROM CELL C WHERE DEMOLISHED_DATE IS NULL;

DROP TABLE BATCH_LOG PURGE;
CREATE TABLE BATCH_LOG
(
   ID NUMBER(19) PRIMARY KEY NOT NULL,
   JOB_NAME VARCHAR2(255) NOT NULL,
   DATE_STARTED TIMESTAMP NOT NULL,
   DATE_ENDED TIMESTAMP NOT NULL,
   RESULT VARCHAR2(4000) NOT NULL
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE;

SELECT count(*) FROM DISTRESS_ALPS_DATA DV MINUS SELECT count(*) FROM DISTRESS_ALPS_DATA DV JOIN DISTRESS D ON DV.ID=D.ID

SELECT (SELECT COUNT(*) FROM DISTRESS_AC DV) - (SELECT COUNT(*) FROM DISTRESS_AC DV JOIN DISTRESS D ON DV.ID=D.ID) FROM DUAL
insert into distress
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_AC DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL
MINUS
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_AC DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
JOIN DISTRESS D ON D.ID=DV.ID
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL

insert into distress
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_AGG_SURVEY_SEMI DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL
MINUS
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_AGG_SURVEY_SEMI DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
JOIN DISTRESS D ON D.ID=DV.ID
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL

SELECT (SELECT COUNT(*) FROM DISTRESS_ALPS_DATA DV) - (SELECT COUNT(*) FROM DISTRESS_ALPS_DATA DV JOIN DISTRESS D ON DV.ID=D.ID) FROM DUAL
insert into distress
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_ALPS_DATA DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL
MINUS
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_ALPS_DATA DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
JOIN DISTRESS D ON D.ID=DV.ID
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL

SELECT (SELECT COUNT(*) FROM DISTRESS_ALPS_RESULTS_RUT DV) - (SELECT COUNT(*) FROM DISTRESS_ALPS_RESULTS_RUT DV JOIN DISTRESS D ON DV.ID=D.ID) FROM DUAL
insert into distress
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_RUTTING_STRAIGHT_EDGE DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL
MINUS
SELECT DV.ID,0,'CARR1DEN','CARR1DEN',SYSDATE,SYSDATE,L.ID
FROM CELLS C JOIN LANE L ON L.CELL_ID=C.ID
JOIN DISTRESS_RUTTING_STRAIGHT_EDGE DV ON DV.CELL=C.CELL AND DV.LANE=L.NAME AND DV.DAY BETWEEN C.FROM_DATE AND C.TO_DATE
JOIN DISTRESS D ON D.ID=DV.ID
WHERE DV.ID IS NOT NULL AND L.ID IS NOT NULL

DROP TABLE SENSOR_COUNTS PURGE;
CREATE TABLE SENSOR_COUNTS
(
   TABLE_NAME varchar2(13),
   CELL NUMBER(22),
   SEQ NUMBER(22),
   FROM_DAY DATE,
   TO_DAY DATE,
   NUM_READINGS NUMBER(22),
   AS_OF timestamp
)
TABLESPACE MDTB01 NOLOGGING
   PCTFREE 10
   INITRANS 1
   MAXTRANS 255
  STORAGE (
   INITIAL 65536
   MINEXTENTS 1
   MAXEXTENTS 2147483645
 )
   NOCACHE;


SELECT unique 'select '''|| owner || '.' || table_name || ''' table_name, count(*) nbr_rows from ' ||  owner || '.' || table_name || ' UNION ALL' tn 
--from dba_TABleS
--where 
--owner in ('MNR','MNROAD','FWD')
from all_tab_columns 
where 
owner not in ('CTXSYS','EXFSYS','MDSYS','OUTLN','OLAPSYS','ORDSYS','SYS','SYSMAN','SYSTEM','WKSYS','WMSYS','XDB')
AND OWNER NOT LIKE 'FLOW%'
AND OWNER NOT IN ('COPES','DBSNMP','XWIKI')
order by tn;


select 'FWD.FWD_CALIBRATION' table_name, count(*) nbr_rows from FWD.FWD_CALIBRATION UNION ALL
select 'FWD.FWD_DROP' table_name, count(*) nbr_rows from FWD.FWD_DROP UNION ALL
select 'FWD.FWD_PEAKS' table_name, count(*) nbr_rows from FWD.FWD_PEAKS UNION ALL
select 'FWD.FWD_SESSION' table_name, count(*) nbr_rows from FWD.FWD_SESSION UNION ALL
select 'FWD.FWD_SETUPS' table_name, count(*) nbr_rows from FWD.FWD_SETUPS UNION ALL
select 'FWD.FWD_STATION' table_name, count(*) nbr_rows from FWD.FWD_STATION UNION ALL
select 'FWD.FWD_TESTS' table_name, count(*) nbr_rows from FWD.FWD_TESTS UNION ALL
select 'MNR.ALL_MNROAD_REPORTS' table_name, count(*) nbr_rows from MNR.ALL_MNROAD_REPORTS UNION ALL
select 'MNR.APP_CONFIG' table_name, count(*) nbr_rows from MNR.APP_CONFIG UNION ALL
select 'MNR.ASBUILT_JOINTS' table_name, count(*) nbr_rows from MNR.ASBUILT_JOINTS UNION ALL
select 'MNR.AUTHORITY' table_name, count(*) nbr_rows from MNR.AUTHORITY UNION ALL
select 'MNR.AUTHORITY_PERSON' table_name, count(*) nbr_rows from MNR.AUTHORITY_PERSON UNION ALL
select 'MNR.BATCH_LOG' table_name, count(*) nbr_rows from MNR.BATCH_LOG UNION ALL
select 'MNR.CABINET_EVENTS' table_name, count(*) nbr_rows from MNR.CABINET_EVENTS UNION ALL
select 'MNR.CABINET_EVENT_ACTIONS' table_name, count(*) nbr_rows from MNR.CABINET_EVENT_ACTIONS UNION ALL
select 'MNR.CABINET_TEMPS' table_name, count(*) nbr_rows from MNR.CABINET_TEMPS UNION ALL
select 'MNR.CELL' table_name, count(*) nbr_rows from MNR.CELL UNION ALL
select 'MNR.CELL_CELL' table_name, count(*) nbr_rows from MNR.CELL_CELL UNION ALL
select 'MNR.CELL_DOWEL_BAR_LOCATIONS' table_name, count(*) nbr_rows from MNR.CELL_DOWEL_BAR_LOCATIONS UNION ALL
select 'MNR.CELL_HISTORY' table_name, count(*) nbr_rows from MNR.CELL_HISTORY UNION ALL
select 'MNR.CELL_THICKNESS_HMA_LIFTS' table_name, count(*) nbr_rows from MNR.CELL_THICKNESS_HMA_LIFTS UNION ALL
select 'MNR.COLUMN_DESCRIPTIONS' table_name, count(*) nbr_rows from MNR.COLUMN_DESCRIPTIONS UNION ALL
select 'MNR.CONCRETE_CRASHES' table_name, count(*) nbr_rows from MNR.CONCRETE_CRASHES UNION ALL
select 'MNR.COUNTIES' table_name, count(*) nbr_rows from MNR.COUNTIES UNION ALL
select 'MNR.CR_VALUES' table_name, count(*) nbr_rows from MNR.CR_VALUES UNION ALL
select 'MNR.CSI_INV' table_name, count(*) nbr_rows from MNR.CSI_INV UNION ALL
select 'MNR.CT_ERRORS' table_name, count(*) nbr_rows from MNR.CT_ERRORS UNION ALL
select 'MNR.CT_VALUES' table_name, count(*) nbr_rows from MNR.CT_VALUES UNION ALL
select 'MNR.D4' table_name, count(*) nbr_rows from MNR.D4 UNION ALL
select 'MNR.DAILY_TEMPS' table_name, count(*) nbr_rows from MNR.DAILY_TEMPS UNION ALL
select 'MNR.DAILY_TEMPS_FI_TI' table_name, count(*) nbr_rows from MNR.DAILY_TEMPS_FI_TI UNION ALL
select 'MNR.DAILY_TEMPS_LOOKUP' table_name, count(*) nbr_rows from MNR.DAILY_TEMPS_LOOKUP UNION ALL
select 'MNR.DAILY_TEMPS_REFT_LOOKUP' table_name, count(*) nbr_rows from MNR.DAILY_TEMPS_REFT_LOOKUP UNION ALL
select 'MNR.DATABASE_REMOVED_TABLES' table_name, count(*) nbr_rows from MNR.DATABASE_REMOVED_TABLES UNION ALL
select 'MNR.DATABASE_TABLE_DESC' table_name, count(*) nbr_rows from MNR.DATABASE_TABLE_DESC UNION ALL
select 'MNR.DB_TABLES_DUP_OLD' table_name, count(*) nbr_rows from MNR.DB_TABLES_DUP_OLD UNION ALL
select 'MNR.DCP_DROP_DATA' table_name, count(*) nbr_rows from MNR.DCP_DROP_DATA UNION ALL
select 'MNR.DCP_LOCATION' table_name, count(*) nbr_rows from MNR.DCP_LOCATION UNION ALL
select 'MNR.DCP_TESTS' table_name, count(*) nbr_rows from MNR.DCP_TESTS UNION ALL
select 'MNR.DCP_TESTS_OTHER' table_name, count(*) nbr_rows from MNR.DCP_TESTS_OTHER UNION ALL
select 'MNR.DCP_VALUES' table_name, count(*) nbr_rows from MNR.DCP_VALUES UNION ALL
select 'MNR.DCP_VALUES_OTHER' table_name, count(*) nbr_rows from MNR.DCP_VALUES_OTHER UNION ALL
select 'MNR.DIPSTICK_PIN_ELEV' table_name, count(*) nbr_rows from MNR.DIPSTICK_PIN_ELEV UNION ALL
select 'MNR.DISTRESS' table_name, count(*) nbr_rows from MNR.DISTRESS UNION ALL
select 'MNR.DISTRESS_AC' table_name, count(*) nbr_rows from MNR.DISTRESS_AC UNION ALL
select 'MNR.DISTRESS_AGG_SURVEY_SEMI' table_name, count(*) nbr_rows from MNR.DISTRESS_AGG_SURVEY_SEMI UNION ALL
select 'MNR.DISTRESS_ALPS_DATA' table_name, count(*) nbr_rows from MNR.DISTRESS_ALPS_DATA UNION ALL
select 'MNR.DISTRESS_ALPS_RESULTS_RUT' table_name, count(*) nbr_rows from MNR.DISTRESS_ALPS_RESULTS_RUT UNION ALL
select 'MNR.DISTRESS_CIRCULR_TEXTR_METER' table_name, count(*) nbr_rows from MNR.DISTRESS_CIRCULR_TEXTR_METER UNION ALL
select 'MNR.DISTRESS_CUPPING' table_name, count(*) nbr_rows from MNR.DISTRESS_CUPPING UNION ALL
select 'MNR.DISTRESS_DYNAMIC_FRICTION' table_name, count(*) nbr_rows from MNR.DISTRESS_DYNAMIC_FRICTION UNION ALL
select 'MNR.DISTRESS_FIELD_MOISTURE' table_name, count(*) nbr_rows from MNR.DISTRESS_FIELD_MOISTURE UNION ALL
select 'MNR.DISTRESS_FRICTION_DATA' table_name, count(*) nbr_rows from MNR.DISTRESS_FRICTION_DATA UNION ALL
select 'MNR.DISTRESS_FRICTION_GRIP' table_name, count(*) nbr_rows from MNR.DISTRESS_FRICTION_GRIP UNION ALL
select 'MNR.DISTRESS_JPCC' table_name, count(*) nbr_rows from MNR.DISTRESS_JPCC UNION ALL
select 'MNR.DISTRESS_LANE_SHOULDER_DROPOFF' table_name, count(*) nbr_rows from MNR.DISTRESS_LANE_SHOULDER_DROPOFF UNION ALL
select 'MNR.DISTRESS_LIGHTWEIGHT_DEFLECT' table_name, count(*) nbr_rows from MNR.DISTRESS_LIGHTWEIGHT_DEFLECT UNION ALL
select 'MNR.DISTRESS_NUCLEAR_DENSITY' table_name, count(*) nbr_rows from MNR.DISTRESS_NUCLEAR_DENSITY UNION ALL
select 'MNR.DISTRESS_OBSI_DATA' table_name, count(*) nbr_rows from MNR.DISTRESS_OBSI_DATA UNION ALL
select 'MNR.DISTRESS_OBSI_SUMMARY' table_name, count(*) nbr_rows from MNR.DISTRESS_OBSI_SUMMARY UNION ALL
select 'MNR.DISTRESS_PATHWAYS_ERD' table_name, count(*) nbr_rows from MNR.DISTRESS_PATHWAYS_ERD UNION ALL
select 'MNR.DISTRESS_PATHWAYS_VALUES' table_name, count(*) nbr_rows from MNR.DISTRESS_PATHWAYS_VALUES UNION ALL
select 'MNR.DISTRESS_PAVETECH_VALUES' table_name, count(*) nbr_rows from MNR.DISTRESS_PAVETECH_VALUES UNION ALL
select 'MNR.DISTRESS_PCC_FAULTS' table_name, count(*) nbr_rows from MNR.DISTRESS_PCC_FAULTS UNION ALL
select 'MNR.DISTRESS_PROCEQ' table_name, count(*) nbr_rows from MNR.DISTRESS_PROCEQ UNION ALL
select 'MNR.DISTRESS_RIDE_LISA' table_name, count(*) nbr_rows from MNR.DISTRESS_RIDE_LISA UNION ALL
select 'MNR.DISTRESS_RUTTING_DIPSTICK' table_name, count(*) nbr_rows from MNR.DISTRESS_RUTTING_DIPSTICK UNION ALL
select 'MNR.DISTRESS_RUTTING_DIPSTICK_PINS' table_name, count(*) nbr_rows from MNR.DISTRESS_RUTTING_DIPSTICK_PINS UNION ALL
select 'MNR.DISTRESS_RUTTING_DIPSTICK_RAW' table_name, count(*) nbr_rows from MNR.DISTRESS_RUTTING_DIPSTICK_RAW UNION ALL
select 'MNR.DISTRESS_RUTTING_STRAIGHT_EDGE' table_name, count(*) nbr_rows from MNR.DISTRESS_RUTTING_STRAIGHT_EDGE UNION ALL
select 'MNR.DISTRESS_SAND_PATCH' table_name, count(*) nbr_rows from MNR.DISTRESS_SAND_PATCH UNION ALL
select 'MNR.DISTRESS_SCHMIDT_HAMMER' table_name, count(*) nbr_rows from MNR.DISTRESS_SCHMIDT_HAMMER UNION ALL
select 'MNR.DISTRESS_SOUND_ABSORPTION' table_name, count(*) nbr_rows from MNR.DISTRESS_SOUND_ABSORPTION UNION ALL
select 'MNR.DISTRESS_WATER_PERMEABILITY' table_name, count(*) nbr_rows from MNR.DISTRESS_WATER_PERMEABILITY UNION ALL
select 'MNR.DOWEL_BAR' table_name, count(*) nbr_rows from MNR.DOWEL_BAR UNION ALL
select 'MNR.DYNAMIC_LOAD_TEST_DESCRIPTIONS' table_name, count(*) nbr_rows from MNR.DYNAMIC_LOAD_TEST_DESCRIPTIONS UNION ALL
select 'MNR.DYNAMIC_LOAD_TEST_VALUES' table_name, count(*) nbr_rows from MNR.DYNAMIC_LOAD_TEST_VALUES UNION ALL
select 'MNR.EC_VALUES' table_name, count(*) nbr_rows from MNR.EC_VALUES UNION ALL
select 'MNR.ERROR_NUMS' table_name, count(*) nbr_rows from MNR.ERROR_NUMS UNION ALL
select 'MNR.ES_METADATA' table_name, count(*) nbr_rows from MNR.ES_METADATA UNION ALL
select 'MNR.ES_SITES' table_name, count(*) nbr_rows from MNR.ES_SITES UNION ALL
select 'MNR.ET_REPAIR' table_name, count(*) nbr_rows from MNR.ET_REPAIR UNION ALL
select 'MNR.ET_VALUES' table_name, count(*) nbr_rows from MNR.ET_VALUES UNION ALL
select 'MNR.EW_VALUES' table_name, count(*) nbr_rows from MNR.EW_VALUES UNION ALL
select 'MNR.EXT_MR_K123' table_name, count(*) nbr_rows from MNR.EXT_MR_K123 UNION ALL
select 'MNR.FACILITY' table_name, count(*) nbr_rows from MNR.FACILITY UNION ALL
select 'MNR.FG_VALUES' table_name, count(*) nbr_rows from MNR.FG_VALUES UNION ALL
select 'MNR.FL_VALUES' table_name, count(*) nbr_rows from MNR.FL_VALUES UNION ALL
select 'MNR.FORENSIC_DENSITY' table_name, count(*) nbr_rows from MNR.FORENSIC_DENSITY UNION ALL
select 'MNR.FORENSIC_ROD_LEVEL' table_name, count(*) nbr_rows from MNR.FORENSIC_ROD_LEVEL UNION ALL
select 'MNR.FORENSIC_RUTTING_SUMMARY' table_name, count(*) nbr_rows from MNR.FORENSIC_RUTTING_SUMMARY UNION ALL
select 'MNR.FP_VALUES' table_name, count(*) nbr_rows from MNR.FP_VALUES UNION ALL
select 'MNR.FROST' table_name, count(*) nbr_rows from MNR.FROST UNION ALL
select 'MNR.FROST_CASS' table_name, count(*) nbr_rows from MNR.FROST_CASS UNION ALL
select 'MNR.FROST_CHIPPEWANF' table_name, count(*) nbr_rows from MNR.FROST_CHIPPEWANF UNION ALL
select 'MNR.FROST_DEPTH' table_name, count(*) nbr_rows from MNR.FROST_DEPTH UNION ALL
select 'MNR.FROST_KOOCHICHING' table_name, count(*) nbr_rows from MNR.FROST_KOOCHICHING UNION ALL
select 'MNR.FROST_LYON' table_name, count(*) nbr_rows from MNR.FROST_LYON UNION ALL
select 'MNR.FROST_MARSHALL' table_name, count(*) nbr_rows from MNR.FROST_MARSHALL UNION ALL
select 'MNR.FROST_NOBLES' table_name, count(*) nbr_rows from MNR.FROST_NOBLES UNION ALL
select 'MNR.FROST_NORMAN' table_name, count(*) nbr_rows from MNR.FROST_NORMAN UNION ALL
select 'MNR.FROST_OLMSTED' table_name, count(*) nbr_rows from MNR.FROST_OLMSTED UNION ALL
select 'MNR.FROST_OLMSTED2' table_name, count(*) nbr_rows from MNR.FROST_OLMSTED2 UNION ALL
select 'MNR.FROST_OTTERTAIL' table_name, count(*) nbr_rows from MNR.FROST_OTTERTAIL UNION ALL
select 'MNR.FROST_PINS' table_name, count(*) nbr_rows from MNR.FROST_PINS UNION ALL
select 'MNR.FROST_POPE' table_name, count(*) nbr_rows from MNR.FROST_POPE UNION ALL
select 'MNR.FROST_STLOUIS' table_name, count(*) nbr_rows from MNR.FROST_STLOUIS UNION ALL
select 'MNR.FROZEN_SOIL' table_name, count(*) nbr_rows from MNR.FROZEN_SOIL UNION ALL
select 'MNR.FT_VALUES' table_name, count(*) nbr_rows from MNR.FT_VALUES UNION ALL
select 'MNR.FWDHISTORY_DUPES_TEMP' table_name, count(*) nbr_rows from MNR.FWDHISTORY_DUPES_TEMP UNION ALL
select 'MNR.FWD_BACKCALC_RESULTS_V50' table_name, count(*) nbr_rows from MNR.FWD_BACKCALC_RESULTS_V50 UNION ALL
select 'MNR.FWD_CALIBRATION' table_name, count(*) nbr_rows from MNR.FWD_CALIBRATION UNION ALL
select 'MNR.FWD_DAILY_LOG' table_name, count(*) nbr_rows from MNR.FWD_DAILY_LOG UNION ALL
select 'MNR.FWD_DATEFIX_TEMP' table_name, count(*) nbr_rows from MNR.FWD_DATEFIX_TEMP UNION ALL
select 'MNR.FWD_DROP' table_name, count(*) nbr_rows from MNR.FWD_DROP UNION ALL
select 'MNR.FWD_HISTORY' table_name, count(*) nbr_rows from MNR.FWD_HISTORY UNION ALL
select 'MNR.FWD_SESSION' table_name, count(*) nbr_rows from MNR.FWD_SESSION UNION ALL
select 'MNR.FWD_STATION' table_name, count(*) nbr_rows from MNR.FWD_STATION UNION ALL
select 'MNR.FW_VALUES' table_name, count(*) nbr_rows from MNR.FW_VALUES UNION ALL
select 'MNR.GENERAL_TASK_STATUS' table_name, count(*) nbr_rows from MNR.GENERAL_TASK_STATUS UNION ALL
select 'MNR.GROUND_PENETRATING_RADAR' table_name, count(*) nbr_rows from MNR.GROUND_PENETRATING_RADAR UNION ALL
select 'MNR.GROUND_PENET_RADAR_1994' table_name, count(*) nbr_rows from MNR.GROUND_PENET_RADAR_1994 UNION ALL
select 'MNR.GROUND_PENET_RADAR_1999' table_name, count(*) nbr_rows from MNR.GROUND_PENET_RADAR_1999 UNION ALL
select 'MNR.HC_ERRORS' table_name, count(*) nbr_rows from MNR.HC_ERRORS UNION ALL
select 'MNR.HC_VALUES' table_name, count(*) nbr_rows from MNR.HC_VALUES UNION ALL
select 'MNR.HD_VALUES' table_name, count(*) nbr_rows from MNR.HD_VALUES UNION ALL
select 'MNR.HV_VALUES' table_name, count(*) nbr_rows from MNR.HV_VALUES UNION ALL
select 'MNR.IS_FARM_STUDY' table_name, count(*) nbr_rows from MNR.IS_FARM_STUDY UNION ALL
select 'MNR.JSEC_PERMISSION' table_name, count(*) nbr_rows from MNR.JSEC_PERMISSION UNION ALL
select 'MNR.JSEC_ROLE' table_name, count(*) nbr_rows from MNR.JSEC_ROLE UNION ALL
select 'MNR.JSEC_ROLE_PERMISSION_REL' table_name, count(*) nbr_rows from MNR.JSEC_ROLE_PERMISSION_REL UNION ALL
select 'MNR.JSEC_USER' table_name, count(*) nbr_rows from MNR.JSEC_USER UNION ALL
select 'MNR.JSEC_USER_PERMISSION_REL' table_name, count(*) nbr_rows from MNR.JSEC_USER_PERMISSION_REL UNION ALL
select 'MNR.JSEC_USER_ROLE_REL' table_name, count(*) nbr_rows from MNR.JSEC_USER_ROLE_REL UNION ALL
select 'MNR.KB_VALUES' table_name, count(*) nbr_rows from MNR.KB_VALUES UNION ALL
select 'MNR.LANE' table_name, count(*) nbr_rows from MNR.LANE UNION ALL
select 'MNR.LANES' table_name, count(*) nbr_rows from MNR.LANES UNION ALL
select 'MNR.LANE_EVENTS' table_name, count(*) nbr_rows from MNR.LANE_EVENTS UNION ALL
select 'MNR.LAT_VEHICLES' table_name, count(*) nbr_rows from MNR.LAT_VEHICLES UNION ALL
select 'MNR.LAYER' table_name, count(*) nbr_rows from MNR.LAYER UNION ALL
select 'MNR.LIMS' table_name, count(*) nbr_rows from MNR.LIMS UNION ALL
select 'MNR.LIMS_SIEVES' table_name, count(*) nbr_rows from MNR.LIMS_SIEVES UNION ALL
select 'MNR.LVR_CONSTRUCTION_ESALS' table_name, count(*) nbr_rows from MNR.LVR_CONSTRUCTION_ESALS UNION ALL
select 'MNR.LVR_DAILY_LOG' table_name, count(*) nbr_rows from MNR.LVR_DAILY_LOG UNION ALL
select 'MNR.LVR_ESAL_FACTORS' table_name, count(*) nbr_rows from MNR.LVR_ESAL_FACTORS UNION ALL
select 'MNR.LVR_KWIM' table_name, count(*) nbr_rows from MNR.LVR_KWIM UNION ALL
select 'MNR.LVR_TRUCK_WEIGHTS' table_name, count(*) nbr_rows from MNR.LVR_TRUCK_WEIGHTS UNION ALL
select 'MNR.MATCONCMODPOISSONRESULTS030616' table_name, count(*) nbr_rows from MNR.MATCONCMODPOISSONRESULTS030616 UNION ALL
select 'MNR.MATERIAL' table_name, count(*) nbr_rows from MNR.MATERIAL UNION ALL
select 'MNR.MAT_BINDER_ABCD_TEST' table_name, count(*) nbr_rows from MNR.MAT_BINDER_ABCD_TEST UNION ALL
select 'MNR.MAT_BINDER_BBR_TEST' table_name, count(*) nbr_rows from MNR.MAT_BINDER_BBR_TEST UNION ALL
select 'MNR.MAT_BINDER_CRITICAL_CRACK_TEMP' table_name, count(*) nbr_rows from MNR.MAT_BINDER_CRITICAL_CRACK_TEMP UNION ALL
select 'MNR.MAT_BINDER_DENT_FRACTURE' table_name, count(*) nbr_rows from MNR.MAT_BINDER_DENT_FRACTURE UNION ALL
select 'MNR.MAT_BINDER_DILATOMETR_TST' table_name, count(*) nbr_rows from MNR.MAT_BINDER_DILATOMETR_TST UNION ALL
select 'MNR.MAT_BINDER_DSR_TESTS' table_name, count(*) nbr_rows from MNR.MAT_BINDER_DSR_TESTS UNION ALL
select 'MNR.MAT_BINDER_DT_TEST' table_name, count(*) nbr_rows from MNR.MAT_BINDER_DT_TEST UNION ALL
select 'MNR.MAT_BINDER_FATIGUE' table_name, count(*) nbr_rows from MNR.MAT_BINDER_FATIGUE UNION ALL
select 'MNR.MAT_BINDER_REPEATED_CREEP' table_name, count(*) nbr_rows from MNR.MAT_BINDER_REPEATED_CREEP UNION ALL
select 'MNR.MAT_BINDER_STRAIN_SWEEPS' table_name, count(*) nbr_rows from MNR.MAT_BINDER_STRAIN_SWEEPS UNION ALL
select 'MNR.MAT_BINDER_TRADITIONAL_TEST' table_name, count(*) nbr_rows from MNR.MAT_BINDER_TRADITIONAL_TEST UNION ALL
select 'MNR.MAT_BINDER_TRAD_TESTS' table_name, count(*) nbr_rows from MNR.MAT_BINDER_TRAD_TESTS UNION ALL
select 'MNR.MAT_BINDER_ZERO_SHEAR_VIS' table_name, count(*) nbr_rows from MNR.MAT_BINDER_ZERO_SHEAR_VIS UNION ALL
select 'MNR.MAT_CONCRETE_MIX_DESIGNS' table_name, count(*) nbr_rows from MNR.MAT_CONCRETE_MIX_DESIGNS UNION ALL
select 'MNR.MAT_CONCRETE_MIX_GRAD_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONCRETE_MIX_GRAD_RESULTS UNION ALL
select 'MNR.MAT_CONC_AIR_VOID_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONC_AIR_VOID_RESULTS UNION ALL
select 'MNR.MAT_CONC_FIELD_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONC_FIELD_RESULTS UNION ALL
select 'MNR.MAT_CONC_FLEX_STRENGTH' table_name, count(*) nbr_rows from MNR.MAT_CONC_FLEX_STRENGTH UNION ALL
select 'MNR.MAT_CONC_FREEZE_THAW_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONC_FREEZE_THAW_RESULTS UNION ALL
select 'MNR.MAT_CONC_MOD_POISSON_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONC_MOD_POISSON_RESULTS UNION ALL
select 'MNR.MAT_CONC_RAPID_CHLORIDE' table_name, count(*) nbr_rows from MNR.MAT_CONC_RAPID_CHLORIDE UNION ALL
select 'MNR.MAT_CONC_STRENGTH_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_CONC_STRENGTH_RESULTS UNION ALL
select 'MNR.MAT_CONC_THERMAL_EXPANSION' table_name, count(*) nbr_rows from MNR.MAT_CONC_THERMAL_EXPANSION UNION ALL
select 'MNR.MAT_CORE_LENGTHS' table_name, count(*) nbr_rows from MNR.MAT_CORE_LENGTHS UNION ALL
select 'MNR.MAT_HMA_AGING' table_name, count(*) nbr_rows from MNR.MAT_HMA_AGING UNION ALL
select 'MNR.MAT_HMA_APA' table_name, count(*) nbr_rows from MNR.MAT_HMA_APA UNION ALL
select 'MNR.MAT_HMA_BBR_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_BBR_TEST UNION ALL
select 'MNR.MAT_HMA_COMPLEX_SHEAR_MODU' table_name, count(*) nbr_rows from MNR.MAT_HMA_COMPLEX_SHEAR_MODU UNION ALL
select 'MNR.MAT_HMA_CORE_TESTS' table_name, count(*) nbr_rows from MNR.MAT_HMA_CORE_TESTS UNION ALL
select 'MNR.MAT_HMA_DCT_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_DCT_TEST UNION ALL
select 'MNR.MAT_HMA_DILATOMETRIC_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_DILATOMETRIC_TEST UNION ALL
select 'MNR.MAT_HMA_DYNAMIC_MODULUS' table_name, count(*) nbr_rows from MNR.MAT_HMA_DYNAMIC_MODULUS UNION ALL
select 'MNR.MAT_HMA_FLOW_NUMBER' table_name, count(*) nbr_rows from MNR.MAT_HMA_FLOW_NUMBER UNION ALL
select 'MNR.MAT_HMA_HAMBURG' table_name, count(*) nbr_rows from MNR.MAT_HMA_HAMBURG UNION ALL
select 'MNR.MAT_HMA_IDT_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_IDT_TEST UNION ALL
select 'MNR.MAT_HMA_IDT_TEST_BACKUP' table_name, count(*) nbr_rows from MNR.MAT_HMA_IDT_TEST_BACKUP UNION ALL
select 'MNR.MAT_HMA_INDIRECT_TENS_FATI' table_name, count(*) nbr_rows from MNR.MAT_HMA_INDIRECT_TENS_FATI UNION ALL
select 'MNR.MAT_HMA_MIX_TESTS' table_name, count(*) nbr_rows from MNR.MAT_HMA_MIX_TESTS UNION ALL
select 'MNR.MAT_HMA_ORIGINAL_DENSITY_AIR' table_name, count(*) nbr_rows from MNR.MAT_HMA_ORIGINAL_DENSITY_AIR UNION ALL
select 'MNR.MAT_HMA_REPEAT_PERM_DEFORM' table_name, count(*) nbr_rows from MNR.MAT_HMA_REPEAT_PERM_DEFORM UNION ALL
select 'MNR.MAT_HMA_REPEAT_SHEAR' table_name, count(*) nbr_rows from MNR.MAT_HMA_REPEAT_SHEAR UNION ALL
select 'MNR.MAT_HMA_SCB_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_SCB_TEST UNION ALL
select 'MNR.MAT_HMA_SENB_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_SENB_TEST UNION ALL
select 'MNR.MAT_HMA_SHEAR_STRENGTH_PAR' table_name, count(*) nbr_rows from MNR.MAT_HMA_SHEAR_STRENGTH_PAR UNION ALL
select 'MNR.MAT_HMA_SIEVE_DATA' table_name, count(*) nbr_rows from MNR.MAT_HMA_SIEVE_DATA UNION ALL
select 'MNR.MAT_HMA_TRIAXIAL_STATIC_CR' table_name, count(*) nbr_rows from MNR.MAT_HMA_TRIAXIAL_STATIC_CR UNION ALL
select 'MNR.MAT_HMA_TRIAXIAL_STRENGTH' table_name, count(*) nbr_rows from MNR.MAT_HMA_TRIAXIAL_STRENGTH UNION ALL
select 'MNR.MAT_HMA_TSRST_TEST' table_name, count(*) nbr_rows from MNR.MAT_HMA_TSRST_TEST UNION ALL
select 'MNR.MAT_HMA_TTI_OVERLAY' table_name, count(*) nbr_rows from MNR.MAT_HMA_TTI_OVERLAY UNION ALL
select 'MNR.MAT_HMA_TTI_OVERLAY_OLD' table_name, count(*) nbr_rows from MNR.MAT_HMA_TTI_OVERLAY_OLD UNION ALL
select 'MNR.MAT_HMA_ULTRASONIC_MODULUS' table_name, count(*) nbr_rows from MNR.MAT_HMA_ULTRASONIC_MODULUS UNION ALL
select 'MNR.MAT_MATERIALS' table_name, count(*) nbr_rows from MNR.MAT_MATERIALS UNION ALL
select 'MNR.MAT_MR_SOILS_LAB_DATA' table_name, count(*) nbr_rows from MNR.MAT_MR_SOILS_LAB_DATA UNION ALL
select 'MNR.MAT_MR_TESTING_LOG' table_name, count(*) nbr_rows from MNR.MAT_MR_TESTING_LOG UNION ALL
select 'MNR.MAT_PCC_COEF_THERM_EXP' table_name, count(*) nbr_rows from MNR.MAT_PCC_COEF_THERM_EXP UNION ALL
select 'MNR.MAT_PROCTOR_CURVES' table_name, count(*) nbr_rows from MNR.MAT_PROCTOR_CURVES UNION ALL
select 'MNR.MAT_SAMPLES' table_name, count(*) nbr_rows from MNR.MAT_SAMPLES UNION ALL
select 'MNR.MAT_SOIL_GRAD_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_SOIL_GRAD_RESULTS UNION ALL
select 'MNR.MAT_SOIL_MR_PEAKS' table_name, count(*) nbr_rows from MNR.MAT_SOIL_MR_PEAKS UNION ALL
select 'MNR.MAT_SOIL_MR_PEAKS_UMN' table_name, count(*) nbr_rows from MNR.MAT_SOIL_MR_PEAKS_UMN UNION ALL
select 'MNR.MAT_SOIL_MR_RAW' table_name, count(*) nbr_rows from MNR.MAT_SOIL_MR_RAW UNION ALL
select 'MNR.MAT_SOIL_MR_RESULTS' table_name, count(*) nbr_rows from MNR.MAT_SOIL_MR_RESULTS UNION ALL
select 'MNR.MAT_SOIL_SHEAR_INITSTROKE' table_name, count(*) nbr_rows from MNR.MAT_SOIL_SHEAR_INITSTROKE UNION ALL
select 'MNR.MAT_SOIL_SHEAR_STAGE' table_name, count(*) nbr_rows from MNR.MAT_SOIL_SHEAR_STAGE UNION ALL
select 'MNR.MAT_SOIL_SHEAR_TEST' table_name, count(*) nbr_rows from MNR.MAT_SOIL_SHEAR_TEST UNION ALL
select 'MNR.MAT_SOIL_SHEAR_TEST_UMN' table_name, count(*) nbr_rows from MNR.MAT_SOIL_SHEAR_TEST_UMN UNION ALL
select 'MNR.MAT_SOIL_TESTS' table_name, count(*) nbr_rows from MNR.MAT_SOIL_TESTS UNION ALL
select 'MNR.MAT_TEST_TYPES' table_name, count(*) nbr_rows from MNR.MAT_TEST_TYPES UNION ALL
select 'MNR.MAT_UNBOUND_GRADATIONS' table_name, count(*) nbr_rows from MNR.MAT_UNBOUND_GRADATIONS UNION ALL
select 'MNR.MAT_UNBOUND_TUBE_SUCTION' table_name, count(*) nbr_rows from MNR.MAT_UNBOUND_TUBE_SUCTION UNION ALL
select 'MNR.MC_VALUES' table_name, count(*) nbr_rows from MNR.MC_VALUES UNION ALL
select 'MNR.MD_ADDITIONAL_PROPERTIES' table_name, count(*) nbr_rows from MNR.MD_ADDITIONAL_PROPERTIES UNION ALL
select 'MNR.MD_CATALOGS' table_name, count(*) nbr_rows from MNR.MD_CATALOGS UNION ALL
select 'MNR.MD_COLUMNS' table_name, count(*) nbr_rows from MNR.MD_COLUMNS UNION ALL
select 'MNR.MD_CONNECTIONS' table_name, count(*) nbr_rows from MNR.MD_CONNECTIONS UNION ALL
select 'MNR.MD_CONSTRAINTS' table_name, count(*) nbr_rows from MNR.MD_CONSTRAINTS UNION ALL
select 'MNR.MD_CONSTRAINT_DETAILS' table_name, count(*) nbr_rows from MNR.MD_CONSTRAINT_DETAILS UNION ALL
select 'MNR.MD_DERIVATIVES' table_name, count(*) nbr_rows from MNR.MD_DERIVATIVES UNION ALL
select 'MNR.MD_GROUPS' table_name, count(*) nbr_rows from MNR.MD_GROUPS UNION ALL
select 'MNR.MD_GROUP_MEMBERS' table_name, count(*) nbr_rows from MNR.MD_GROUP_MEMBERS UNION ALL
select 'MNR.MD_GROUP_PRIVILEGES' table_name, count(*) nbr_rows from MNR.MD_GROUP_PRIVILEGES UNION ALL
select 'MNR.MD_INDEXES' table_name, count(*) nbr_rows from MNR.MD_INDEXES UNION ALL
select 'MNR.MD_INDEX_DETAILS' table_name, count(*) nbr_rows from MNR.MD_INDEX_DETAILS UNION ALL
select 'MNR.MD_MIGR_DEPENDENCY' table_name, count(*) nbr_rows from MNR.MD_MIGR_DEPENDENCY UNION ALL
select 'MNR.MD_MIGR_PARAMETER' table_name, count(*) nbr_rows from MNR.MD_MIGR_PARAMETER UNION ALL
select 'MNR.MD_MIGR_WEAKDEP' table_name, count(*) nbr_rows from MNR.MD_MIGR_WEAKDEP UNION ALL
select 'MNR.MD_OTHER_OBJECTS' table_name, count(*) nbr_rows from MNR.MD_OTHER_OBJECTS UNION ALL
select 'MNR.MD_PACKAGES' table_name, count(*) nbr_rows from MNR.MD_PACKAGES UNION ALL
select 'MNR.MD_PRIVILEGES' table_name, count(*) nbr_rows from MNR.MD_PRIVILEGES UNION ALL
select 'MNR.MD_PROJECTS' table_name, count(*) nbr_rows from MNR.MD_PROJECTS UNION ALL
select 'MNR.MD_REGISTRY' table_name, count(*) nbr_rows from MNR.MD_REGISTRY UNION ALL
select 'MNR.MD_REPOVERSIONS' table_name, count(*) nbr_rows from MNR.MD_REPOVERSIONS UNION ALL
select 'MNR.MD_SCHEMAS' table_name, count(*) nbr_rows from MNR.MD_SCHEMAS UNION ALL
select 'MNR.MD_SEQUENCES' table_name, count(*) nbr_rows from MNR.MD_SEQUENCES UNION ALL
select 'MNR.MD_STORED_PROGRAMS' table_name, count(*) nbr_rows from MNR.MD_STORED_PROGRAMS UNION ALL
select 'MNR.MD_SYNONYMS' table_name, count(*) nbr_rows from MNR.MD_SYNONYMS UNION ALL
select 'MNR.MD_TABLES' table_name, count(*) nbr_rows from MNR.MD_TABLES UNION ALL
select 'MNR.MD_TABLESPACES' table_name, count(*) nbr_rows from MNR.MD_TABLESPACES UNION ALL
select 'MNR.MD_TRIGGERS' table_name, count(*) nbr_rows from MNR.MD_TRIGGERS UNION ALL
select 'MNR.MD_USERS' table_name, count(*) nbr_rows from MNR.MD_USERS UNION ALL
select 'MNR.MD_USER_DEFINED_DATA_TYPES' table_name, count(*) nbr_rows from MNR.MD_USER_DEFINED_DATA_TYPES UNION ALL
select 'MNR.MD_USER_PRIVILEGES' table_name, count(*) nbr_rows from MNR.MD_USER_PRIVILEGES UNION ALL
select 'MNR.MD_VIEWS' table_name, count(*) nbr_rows from MNR.MD_VIEWS UNION ALL
select 'MNR.MH_VALUES' table_name, count(*) nbr_rows from MNR.MH_VALUES UNION ALL
select 'MNR.MIGRATION_RESERVED_WORDS' table_name, count(*) nbr_rows from MNR.MIGRATION_RESERVED_WORDS UNION ALL
select 'MNR.MIGRLOG' table_name, count(*) nbr_rows from MNR.MIGRLOG UNION ALL
select 'MNR.MIGR_DATATYPE_TRANSFORM_MAP' table_name, count(*) nbr_rows from MNR.MIGR_DATATYPE_TRANSFORM_MAP UNION ALL
select 'MNR.MIGR_DATATYPE_TRANSFORM_RULE' table_name, count(*) nbr_rows from MNR.MIGR_DATATYPE_TRANSFORM_RULE UNION ALL
select 'MNR.MIGR_GENERATION_ORDER' table_name, count(*) nbr_rows from MNR.MIGR_GENERATION_ORDER UNION ALL
select 'MNR.MM_VALUES' table_name, count(*) nbr_rows from MNR.MM_VALUES UNION ALL
select 'MNR.MNROAD_REQUESTS' table_name, count(*) nbr_rows from MNR.MNROAD_REQUESTS UNION ALL
select 'MNR.MNROAD_REQUESTS_LOG' table_name, count(*) nbr_rows from MNR.MNROAD_REQUESTS_LOG UNION ALL
select 'MNR.MODELS' table_name, count(*) nbr_rows from MNR.MODELS UNION ALL
select 'MNR.MRL_PERSONNEL' table_name, count(*) nbr_rows from MNR.MRL_PERSONNEL UNION ALL
select 'MNR.MR_AGG_LAB' table_name, count(*) nbr_rows from MNR.MR_AGG_LAB UNION ALL
select 'MNR.MR_DATA' table_name, count(*) nbr_rows from MNR.MR_DATA UNION ALL
select 'MNR.MR_K123' table_name, count(*) nbr_rows from MNR.MR_K123 UNION ALL
select 'MNR.MR_LIMS' table_name, count(*) nbr_rows from MNR.MR_LIMS UNION ALL
select 'MNR.MR_LOG' table_name, count(*) nbr_rows from MNR.MR_LOG UNION ALL
select 'MNR.MR_PEAK_PICK' table_name, count(*) nbr_rows from MNR.MR_PEAK_PICK UNION ALL
select 'MNR.MR_PEAK_PICK_MA' table_name, count(*) nbr_rows from MNR.MR_PEAK_PICK_MA UNION ALL
select 'MNR.MR_PEAK_PICK_MA_UW_STAGE' table_name, count(*) nbr_rows from MNR.MR_PEAK_PICK_MA_UW_STAGE UNION ALL
select 'MNR.MR_SOILS_LAB' table_name, count(*) nbr_rows from MNR.MR_SOILS_LAB UNION ALL
select 'MNR.MR_SOIL_CODES' table_name, count(*) nbr_rows from MNR.MR_SOIL_CODES UNION ALL
select 'MNR.MR_STATUS_CODES' table_name, count(*) nbr_rows from MNR.MR_STATUS_CODES UNION ALL
select 'MNR.MR_TIME_HISTORY' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY UNION ALL
select 'MNR.MR_TIME_HISTORY_28A' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY_28A UNION ALL
select 'MNR.MR_TIME_HISTORY_CYCLES' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY_CYCLES UNION ALL
select 'MNR.MR_TIME_HISTORY_CYCLES_28A' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY_CYCLES_28A UNION ALL
select 'MNR.MR_TIME_HISTORY_CYCLES_TEMP' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY_CYCLES_TEMP UNION ALL
select 'MNR.MR_TIME_HISTORY_TEMP' table_name, count(*) nbr_rows from MNR.MR_TIME_HISTORY_TEMP UNION ALL
select 'MNR.MT_VALUES' table_name, count(*) nbr_rows from MNR.MT_VALUES UNION ALL
select 'MNR.NT_ERRORS' table_name, count(*) nbr_rows from MNR.NT_ERRORS UNION ALL
select 'MNR.NT_VALUES' table_name, count(*) nbr_rows from MNR.NT_VALUES UNION ALL
select 'MNR.NW_WEATHER' table_name, count(*) nbr_rows from MNR.NW_WEATHER UNION ALL
select 'MNR.OFFLINE_BASELINE_SENSOR_VALUES' table_name, count(*) nbr_rows from MNR.OFFLINE_BASELINE_SENSOR_VALUES UNION ALL
select 'MNR.OFFLINE_DATA_COLLECTION' table_name, count(*) nbr_rows from MNR.OFFLINE_DATA_COLLECTION UNION ALL
select 'MNR.OFFLINE_DYNAMIC_TESTS' table_name, count(*) nbr_rows from MNR.OFFLINE_DYNAMIC_TESTS UNION ALL
select 'MNR.ORG_AXLE_W9' table_name, count(*) nbr_rows from MNR.ORG_AXLE_W9 UNION ALL
select 'MNR.ORG_W9' table_name, count(*) nbr_rows from MNR.ORG_W9 UNION ALL
select 'MNR.OS_COAX_RAW_VALUES' table_name, count(*) nbr_rows from MNR.OS_COAX_RAW_VALUES UNION ALL
select 'MNR.OS_MANUAL_VALUES' table_name, count(*) nbr_rows from MNR.OS_MANUAL_VALUES UNION ALL
select 'MNR.OS_REFERENCE_ELEVATIONS' table_name, count(*) nbr_rows from MNR.OS_REFERENCE_ELEVATIONS UNION ALL
select 'MNR.OS_TRANS_RAW_VALUES' table_name, count(*) nbr_rows from MNR.OS_TRANS_RAW_VALUES UNION ALL
select 'MNR.PC' table_name, count(*) nbr_rows from MNR.PC UNION ALL
select 'MNR.PCC_JOINT_LOAD_TRANSFER' table_name, count(*) nbr_rows from MNR.PCC_JOINT_LOAD_TRANSFER UNION ALL
select 'MNR.PC_CABINETS' table_name, count(*) nbr_rows from MNR.PC_CABINETS UNION ALL
select 'MNR.PERSON' table_name, count(*) nbr_rows from MNR.PERSON UNION ALL
select 'MNR.PIT_SAMID_GRAD_TNAME' table_name, count(*) nbr_rows from MNR.PIT_SAMID_GRAD_TNAME UNION ALL
select 'MNR.PLANNED_CELLS' table_name, count(*) nbr_rows from MNR.PLANNED_CELLS UNION ALL
select 'MNR.PLANNED_SENSORS' table_name, count(*) nbr_rows from MNR.PLANNED_SENSORS UNION ALL
select 'MNR.PLAN_TABLE' table_name, count(*) nbr_rows from MNR.PLAN_TABLE UNION ALL
select 'MNR.PL_ERRORS' table_name, count(*) nbr_rows from MNR.PL_ERRORS UNION ALL
select 'MNR.PL_VALUES' table_name, count(*) nbr_rows from MNR.PL_VALUES UNION ALL
select 'MNR.PROJECT_DOLLARS' table_name, count(*) nbr_rows from MNR.PROJECT_DOLLARS UNION ALL
select 'MNR.PROJECT_STAFF_REQUIREMENTS' table_name, count(*) nbr_rows from MNR.PROJECT_STAFF_REQUIREMENTS UNION ALL
select 'MNR.PT_ERRORS' table_name, count(*) nbr_rows from MNR.PT_ERRORS UNION ALL
select 'MNR.PT_VALUES' table_name, count(*) nbr_rows from MNR.PT_VALUES UNION ALL
select 'MNR.QHRS' table_name, count(*) nbr_rows from MNR.QHRS UNION ALL
select 'MNR.QUERY' table_name, count(*) nbr_rows from MNR.QUERY UNION ALL
select 'MNR.REQUESTMAP' table_name, count(*) nbr_rows from MNR.REQUESTMAP UNION ALL
select 'MNR.RESEARCH' table_name, count(*) nbr_rows from MNR.RESEARCH UNION ALL
select 'MNR.RESEARCH_CONTRACTS' table_name, count(*) nbr_rows from MNR.RESEARCH_CONTRACTS UNION ALL
select 'MNR.RESEARCH_SITE' table_name, count(*) nbr_rows from MNR.RESEARCH_SITE UNION ALL
select 'MNR.RE_VALUES' table_name, count(*) nbr_rows from MNR.RE_VALUES UNION ALL
select 'MNR.RG_CALIBRATIONS' table_name, count(*) nbr_rows from MNR.RG_CALIBRATIONS UNION ALL
select 'MNR.RG_VALUES' table_name, count(*) nbr_rows from MNR.RG_VALUES UNION ALL
select 'MNR.RH_ERRORS' table_name, count(*) nbr_rows from MNR.RH_ERRORS UNION ALL
select 'MNR.RH_VALUES' table_name, count(*) nbr_rows from MNR.RH_VALUES UNION ALL
select 'MNR.RM_VALUES' table_name, count(*) nbr_rows from MNR.RM_VALUES UNION ALL
select 'MNR.ROAD_SECTION' table_name, count(*) nbr_rows from MNR.ROAD_SECTION UNION ALL
select 'MNR.RP_BASE_VALUES' table_name, count(*) nbr_rows from MNR.RP_BASE_VALUES UNION ALL
select 'MNR.RP_VALUES' table_name, count(*) nbr_rows from MNR.RP_VALUES UNION ALL
select 'MNR.RT_VALUES' table_name, count(*) nbr_rows from MNR.RT_VALUES UNION ALL
select 'MNR.RWIS_APAIRHIST' table_name, count(*) nbr_rows from MNR.RWIS_APAIRHIST UNION ALL
select 'MNR.RW_VALUES' table_name, count(*) nbr_rows from MNR.RW_VALUES UNION ALL
select 'MNR.SCHEDULE' table_name, count(*) nbr_rows from MNR.SCHEDULE UNION ALL
select 'MNR.SENSOR' table_name, count(*) nbr_rows from MNR.SENSOR UNION ALL
select 'MNR.SENSOR_AVG' table_name, count(*) nbr_rows from MNR.SENSOR_AVG UNION ALL
select 'MNR.SENSOR_CALIBRATION_FACTORS' table_name, count(*) nbr_rows from MNR.SENSOR_CALIBRATION_FACTORS UNION ALL
select 'MNR.SENSOR_CHECKS' table_name, count(*) nbr_rows from MNR.SENSOR_CHECKS UNION ALL
select 'MNR.SENSOR_COUNTS' table_name, count(*) nbr_rows from MNR.SENSOR_COUNTS UNION ALL
select 'MNR.SENSOR_EVALUATION' table_name, count(*) nbr_rows from MNR.SENSOR_EVALUATION UNION ALL
select 'MNR.SENSOR_EVENT_LOG' table_name, count(*) nbr_rows from MNR.SENSOR_EVENT_LOG UNION ALL
select 'MNR.SENSOR_LOCATIONS' table_name, count(*) nbr_rows from MNR.SENSOR_LOCATIONS UNION ALL
select 'MNR.SENSOR_MODEL' table_name, count(*) nbr_rows from MNR.SENSOR_MODEL UNION ALL
select 'MNR.SENSOR_MODEL_DESCRIPTIONS' table_name, count(*) nbr_rows from MNR.SENSOR_MODEL_DESCRIPTIONS UNION ALL
select 'MNR.SENSOR_RAW_DATA' table_name, count(*) nbr_rows from MNR.SENSOR_RAW_DATA UNION ALL
select 'MNR.SEQUENCE' table_name, count(*) nbr_rows from MNR.SEQUENCE UNION ALL
select 'MNR.SEVEN_DAY_FORECAST_TEMPS' table_name, count(*) nbr_rows from MNR.SEVEN_DAY_FORECAST_TEMPS UNION ALL
select 'MNR.SITE_ACTIVITY_LOG' table_name, count(*) nbr_rows from MNR.SITE_ACTIVITY_LOG UNION ALL
select 'MNR.SITE_CABINET' table_name, count(*) nbr_rows from MNR.SITE_CABINET UNION ALL
select 'MNR.SITE_INVENTORY' table_name, count(*) nbr_rows from MNR.SITE_INVENTORY UNION ALL
select 'MNR.SW_ERRORS' table_name, count(*) nbr_rows from MNR.SW_ERRORS UNION ALL
select 'MNR.SW_VALUES' table_name, count(*) nbr_rows from MNR.SW_VALUES UNION ALL
select 'MNR.TAGS' table_name, count(*) nbr_rows from MNR.TAGS UNION ALL
select 'MNR.TB_CALIBRATIONS' table_name, count(*) nbr_rows from MNR.TB_CALIBRATIONS UNION ALL
select 'MNR.TB_ERRORS' table_name, count(*) nbr_rows from MNR.TB_ERRORS UNION ALL
select 'MNR.TB_VALUES' table_name, count(*) nbr_rows from MNR.TB_VALUES UNION ALL
select 'MNR.TC27' table_name, count(*) nbr_rows from MNR.TC27 UNION ALL
select 'MNR.TCS_TEST_RECORDING_PARAMS' table_name, count(*) nbr_rows from MNR.TCS_TEST_RECORDING_PARAMS UNION ALL
select 'MNR.TCS_TEST_SENSORS' table_name, count(*) nbr_rows from MNR.TCS_TEST_SENSORS UNION ALL
select 'MNR.TCS_TEST_SENS_ENGR_UNITS' table_name, count(*) nbr_rows from MNR.TCS_TEST_SENS_ENGR_UNITS UNION ALL
select 'MNR.TCS_TEST_TAGS' table_name, count(*) nbr_rows from MNR.TCS_TEST_TAGS UNION ALL
select 'MNR.TCS_TEST_TAG_ENGR_UNITS' table_name, count(*) nbr_rows from MNR.TCS_TEST_TAG_ENGR_UNITS UNION ALL
select 'MNR.TCS_TEST_TRANSFORMS' table_name, count(*) nbr_rows from MNR.TCS_TEST_TRANSFORMS UNION ALL
select 'MNR.TC_ERRORS' table_name, count(*) nbr_rows from MNR.TC_ERRORS UNION ALL
select 'MNR.TC_VALUES' table_name, count(*) nbr_rows from MNR.TC_VALUES UNION ALL
select 'MNR.TC_VALUES_1993' table_name, count(*) nbr_rows from MNR.TC_VALUES_1993 UNION ALL
select 'MNR.TC_VALUES_1994' table_name, count(*) nbr_rows from MNR.TC_VALUES_1994 UNION ALL
select 'MNR.TC_VALUES_1995' table_name, count(*) nbr_rows from MNR.TC_VALUES_1995 UNION ALL
select 'MNR.TC_VALUES_1996' table_name, count(*) nbr_rows from MNR.TC_VALUES_1996 UNION ALL
select 'MNR.TC_VALUES_1997' table_name, count(*) nbr_rows from MNR.TC_VALUES_1997 UNION ALL
select 'MNR.TC_VALUES_1998' table_name, count(*) nbr_rows from MNR.TC_VALUES_1998 UNION ALL
select 'MNR.TC_VALUES_1999' table_name, count(*) nbr_rows from MNR.TC_VALUES_1999 UNION ALL
select 'MNR.TC_VALUES_2000' table_name, count(*) nbr_rows from MNR.TC_VALUES_2000 UNION ALL
select 'MNR.TC_VALUES_2001' table_name, count(*) nbr_rows from MNR.TC_VALUES_2001 UNION ALL
select 'MNR.TC_VALUES_2002' table_name, count(*) nbr_rows from MNR.TC_VALUES_2002 UNION ALL
select 'MNR.TC_VALUES_2003' table_name, count(*) nbr_rows from MNR.TC_VALUES_2003 UNION ALL
select 'MNR.TC_VALUES_2004' table_name, count(*) nbr_rows from MNR.TC_VALUES_2004 UNION ALL
select 'MNR.TC_VALUES_2005' table_name, count(*) nbr_rows from MNR.TC_VALUES_2005 UNION ALL
select 'MNR.TC_VALUES_2006' table_name, count(*) nbr_rows from MNR.TC_VALUES_2006 UNION ALL
select 'MNR.TC_VALUES_2007' table_name, count(*) nbr_rows from MNR.TC_VALUES_2007 UNION ALL
select 'MNR.TC_VALUES_2008' table_name, count(*) nbr_rows from MNR.TC_VALUES_2008 UNION ALL
select 'MNR.TC_VALUES_2009' table_name, count(*) nbr_rows from MNR.TC_VALUES_2009 UNION ALL
select 'MNR.TDR_RECALC' table_name, count(*) nbr_rows from MNR.TDR_RECALC UNION ALL
select 'MNR.TD_AUTOMATED' table_name, count(*) nbr_rows from MNR.TD_AUTOMATED UNION ALL
select 'MNR.TD_ERRORS' table_name, count(*) nbr_rows from MNR.TD_ERRORS UNION ALL
select 'MNR.TD_VALUES' table_name, count(*) nbr_rows from MNR.TD_VALUES UNION ALL
select 'MNR.TD_VALUES_XP_MOVE' table_name, count(*) nbr_rows from MNR.TD_VALUES_XP_MOVE UNION ALL
select 'MNR.TEMP_TDR_RECALC' table_name, count(*) nbr_rows from MNR.TEMP_TDR_RECALC UNION ALL
select 'MNR.TEMP_TD_VALUES' table_name, count(*) nbr_rows from MNR.TEMP_TD_VALUES UNION ALL
select 'MNR.TEST_SECTION' table_name, count(*) nbr_rows from MNR.TEST_SECTION UNION ALL
select 'MNR.THREE_DAY_FORECAST_TEMPS' table_name, count(*) nbr_rows from MNR.THREE_DAY_FORECAST_TEMPS UNION ALL
select 'MNR.TH_VALUES' table_name, count(*) nbr_rows from MNR.TH_VALUES UNION ALL
select 'MNR.TL_ERRORS' table_name, count(*) nbr_rows from MNR.TL_ERRORS UNION ALL
select 'MNR.TL_VALUES' table_name, count(*) nbr_rows from MNR.TL_VALUES UNION ALL
select 'MNR.TM_ERRORS' table_name, count(*) nbr_rows from MNR.TM_ERRORS UNION ALL
select 'MNR.TM_VALUES' table_name, count(*) nbr_rows from MNR.TM_VALUES UNION ALL
select 'MNR.TRACKED_VEHICLE' table_name, count(*) nbr_rows from MNR.TRACKED_VEHICLE UNION ALL
select 'MNR.TRAFFIC_SWITCHES' table_name, count(*) nbr_rows from MNR.TRAFFIC_SWITCHES UNION ALL
select 'MNR.TRAFFIC_SWITCHES_HOUR' table_name, count(*) nbr_rows from MNR.TRAFFIC_SWITCHES_HOUR UNION ALL
select 'MNR.TRANSVERSE_JOINT' table_name, count(*) nbr_rows from MNR.TRANSVERSE_JOINT UNION ALL
select 'MNR.TT_ERRORS' table_name, count(*) nbr_rows from MNR.TT_ERRORS UNION ALL
select 'MNR.TT_VALUES' table_name, count(*) nbr_rows from MNR.TT_VALUES UNION ALL
select 'MNR.UNITS' table_name, count(*) nbr_rows from MNR.UNITS UNION ALL
select 'MNR.VEHICLE_LOCATION' table_name, count(*) nbr_rows from MNR.VEHICLE_LOCATION UNION ALL
select 'MNR.VEHICLE_PASS' table_name, count(*) nbr_rows from MNR.VEHICLE_PASS UNION ALL
select 'MNR.VG_VALUES' table_name, count(*) nbr_rows from MNR.VG_VALUES UNION ALL
select 'MNR.VM_VALUES' table_name, count(*) nbr_rows from MNR.VM_VALUES UNION ALL
select 'MNR.VW_ADJ' table_name, count(*) nbr_rows from MNR.VW_ADJ UNION ALL
select 'MNR.VW_ERRORS' table_name, count(*) nbr_rows from MNR.VW_ERRORS UNION ALL
select 'MNR.VW_ERRORS_NEW' table_name, count(*) nbr_rows from MNR.VW_ERRORS_NEW UNION ALL
select 'MNR.VW_INITIAL_VALUES' table_name, count(*) nbr_rows from MNR.VW_INITIAL_VALUES UNION ALL
select 'MNR.VW_VALUES' table_name, count(*) nbr_rows from MNR.VW_VALUES UNION ALL
select 'MNR.VW_VALUES_1993' table_name, count(*) nbr_rows from MNR.VW_VALUES_1993 UNION ALL
select 'MNR.VW_VALUES_1994' table_name, count(*) nbr_rows from MNR.VW_VALUES_1994 UNION ALL
select 'MNR.VW_VALUES_1995' table_name, count(*) nbr_rows from MNR.VW_VALUES_1995 UNION ALL
select 'MNR.VW_VALUES_1996' table_name, count(*) nbr_rows from MNR.VW_VALUES_1996 UNION ALL
select 'MNR.VW_VALUES_1997' table_name, count(*) nbr_rows from MNR.VW_VALUES_1997 UNION ALL
select 'MNR.VW_VALUES_1998' table_name, count(*) nbr_rows from MNR.VW_VALUES_1998 UNION ALL
select 'MNR.VW_VALUES_1999' table_name, count(*) nbr_rows from MNR.VW_VALUES_1999 UNION ALL
select 'MNR.VW_VALUES_2000' table_name, count(*) nbr_rows from MNR.VW_VALUES_2000 UNION ALL
select 'MNR.VW_VALUES_2001' table_name, count(*) nbr_rows from MNR.VW_VALUES_2001 UNION ALL
select 'MNR.VW_VALUES_2002' table_name, count(*) nbr_rows from MNR.VW_VALUES_2002 UNION ALL
select 'MNR.VW_VALUES_2003' table_name, count(*) nbr_rows from MNR.VW_VALUES_2003 UNION ALL
select 'MNR.VW_VALUES_2004' table_name, count(*) nbr_rows from MNR.VW_VALUES_2004 UNION ALL
select 'MNR.VW_VALUES_2005' table_name, count(*) nbr_rows from MNR.VW_VALUES_2005 UNION ALL
select 'MNR.VW_VALUES_2006' table_name, count(*) nbr_rows from MNR.VW_VALUES_2006 UNION ALL
select 'MNR.VW_VALUES_2007' table_name, count(*) nbr_rows from MNR.VW_VALUES_2007 UNION ALL
select 'MNR.VW_VALUES_2008' table_name, count(*) nbr_rows from MNR.VW_VALUES_2008 UNION ALL
select 'MNR.VW_VALUES_2009' table_name, count(*) nbr_rows from MNR.VW_VALUES_2009 UNION ALL
select 'MNR.VW__VALUES_2008_QUESTION' table_name, count(*) nbr_rows from MNR.VW__VALUES_2008_QUESTION UNION ALL
select 'MNR.WEATHER_AWS' table_name, count(*) nbr_rows from MNR.WEATHER_AWS UNION ALL
select 'MNR.WEATHER_BUFFALO' table_name, count(*) nbr_rows from MNR.WEATHER_BUFFALO UNION ALL
select 'MNR.WEATHER_COMPOSITE' table_name, count(*) nbr_rows from MNR.WEATHER_COMPOSITE UNION ALL
select 'MNR.WEATHER_COMPOSITE_OLD' table_name, count(*) nbr_rows from MNR.WEATHER_COMPOSITE_OLD UNION ALL
select 'MNR.WEATHER_CRREL' table_name, count(*) nbr_rows from MNR.WEATHER_CRREL UNION ALL
select 'MNR.WEATHER_SE' table_name, count(*) nbr_rows from MNR.WEATHER_SE UNION ALL
select 'MNR.WEATHER_STATES' table_name, count(*) nbr_rows from MNR.WEATHER_STATES UNION ALL
select 'MNR.WEATHER_TABLE_LOADING' table_name, count(*) nbr_rows from MNR.WEATHER_TABLE_LOADING UNION ALL
select 'MNR.WM27' table_name, count(*) nbr_rows from MNR.WM27 UNION ALL
select 'MNR.WM28' table_name, count(*) nbr_rows from MNR.WM28 UNION ALL
select 'MNR.WM_ERRORS' table_name, count(*) nbr_rows from MNR.WM_ERRORS UNION ALL
select 'MNR.WM_VALUES' table_name, count(*) nbr_rows from MNR.WM_VALUES UNION ALL
select 'MNR.WM_VALUES_1993' table_name, count(*) nbr_rows from MNR.WM_VALUES_1993 UNION ALL
select 'MNR.WM_VALUES_1994' table_name, count(*) nbr_rows from MNR.WM_VALUES_1994 UNION ALL
select 'MNR.WM_VALUES_1995' table_name, count(*) nbr_rows from MNR.WM_VALUES_1995 UNION ALL
select 'MNR.WM_VALUES_1996' table_name, count(*) nbr_rows from MNR.WM_VALUES_1996 UNION ALL
select 'MNR.WM_VALUES_1997' table_name, count(*) nbr_rows from MNR.WM_VALUES_1997 UNION ALL
select 'MNR.WM_VALUES_1998' table_name, count(*) nbr_rows from MNR.WM_VALUES_1998 UNION ALL
select 'MNR.WM_VALUES_1999' table_name, count(*) nbr_rows from MNR.WM_VALUES_1999 UNION ALL
select 'MNR.WM_VALUES_2000' table_name, count(*) nbr_rows from MNR.WM_VALUES_2000 UNION ALL
select 'MNR.WM_VALUES_2001' table_name, count(*) nbr_rows from MNR.WM_VALUES_2001 UNION ALL
select 'MNR.WM_VALUES_2002' table_name, count(*) nbr_rows from MNR.WM_VALUES_2002 UNION ALL
select 'MNR.WM_VALUES_2003' table_name, count(*) nbr_rows from MNR.WM_VALUES_2003 UNION ALL
select 'MNR.WM_VALUES_2004' table_name, count(*) nbr_rows from MNR.WM_VALUES_2004 UNION ALL
select 'MNR.WM_VALUES_2005' table_name, count(*) nbr_rows from MNR.WM_VALUES_2005 UNION ALL
select 'MNR.WM_VALUES_2006' table_name, count(*) nbr_rows from MNR.WM_VALUES_2006 UNION ALL
select 'MNR.WM_VALUES_2007' table_name, count(*) nbr_rows from MNR.WM_VALUES_2007 UNION ALL
select 'MNR.WM_VALUES_2008' table_name, count(*) nbr_rows from MNR.WM_VALUES_2008 UNION ALL
select 'MNR.WM_VALUES_2009' table_name, count(*) nbr_rows from MNR.WM_VALUES_2009 UNION ALL
select 'MNR.XB_VALUES' table_name, count(*) nbr_rows from MNR.XB_VALUES UNION ALL
select 'MNR.XG_VALUES' table_name, count(*) nbr_rows from MNR.XG_VALUES UNION ALL
select 'MNR.XH_VALUES' table_name, count(*) nbr_rows from MNR.XH_VALUES UNION ALL
select 'MNR.XL_ERRORS' table_name, count(*) nbr_rows from MNR.XL_ERRORS UNION ALL
select 'MNR.XL_VALUES' table_name, count(*) nbr_rows from MNR.XL_VALUES UNION ALL
select 'MNR.XM_VALUES' table_name, count(*) nbr_rows from MNR.XM_VALUES UNION ALL
select 'MNR.XS_ERRORS' table_name, count(*) nbr_rows from MNR.XS_ERRORS UNION ALL
select 'MNR.XS_VALUES' table_name, count(*) nbr_rows from MNR.XS_VALUES UNION ALL
select 'MNR.XT_ERRORS' table_name, count(*) nbr_rows from MNR.XT_ERRORS UNION ALL
select 'MNR.XT_VALUES' table_name, count(*) nbr_rows from MNR.XT_VALUES UNION ALL
select 'MNR.XV_ERRORS' table_name, count(*) nbr_rows from MNR.XV_ERRORS UNION ALL
select 'MNR.XV_VALUES' table_name, count(*) nbr_rows from MNR.XV_VALUES UNION ALL
select 'MNR.XV_VALUES_1993' table_name, count(*) nbr_rows from MNR.XV_VALUES_1993 UNION ALL
select 'MNR.XV_VALUES_1994' table_name, count(*) nbr_rows from MNR.XV_VALUES_1994 UNION ALL
select 'MNR.XV_VALUES_1995' table_name, count(*) nbr_rows from MNR.XV_VALUES_1995 UNION ALL
select 'MNR.XV_VALUES_1996' table_name, count(*) nbr_rows from MNR.XV_VALUES_1996 UNION ALL
select 'MNR.XV_VALUES_1997' table_name, count(*) nbr_rows from MNR.XV_VALUES_1997 UNION ALL
select 'MNR.XV_VALUES_1998' table_name, count(*) nbr_rows from MNR.XV_VALUES_1998 UNION ALL
select 'MNR.XV_VALUES_1999' table_name, count(*) nbr_rows from MNR.XV_VALUES_1999 UNION ALL
select 'MNR.XV_VALUES_2000' table_name, count(*) nbr_rows from MNR.XV_VALUES_2000 UNION ALL
select 'MNR.XV_VALUES_2001' table_name, count(*) nbr_rows from MNR.XV_VALUES_2001 UNION ALL
select 'MNR.XV_VALUES_2002' table_name, count(*) nbr_rows from MNR.XV_VALUES_2002 UNION ALL
select 'MNR.XV_VALUES_2003' table_name, count(*) nbr_rows from MNR.XV_VALUES_2003 UNION ALL
select 'MNR.XV_VALUES_2004' table_name, count(*) nbr_rows from MNR.XV_VALUES_2004 UNION ALL
select 'MNR.XV_VALUES_2005' table_name, count(*) nbr_rows from MNR.XV_VALUES_2005 UNION ALL
select 'MNR.XV_VALUES_2006' table_name, count(*) nbr_rows from MNR.XV_VALUES_2006 UNION ALL
select 'MNR.XV_VALUES_2007' table_name, count(*) nbr_rows from MNR.XV_VALUES_2007 UNION ALL
select 'MNR.XV_VALUES_2008' table_name, count(*) nbr_rows from MNR.XV_VALUES_2008 UNION ALL
select 'MNR.XV_VALUES_2009' table_name, count(*) nbr_rows from MNR.XV_VALUES_2009 UNION ALL
select 'MNR.XV__VALUES_2008_QUESTION' table_name, count(*) nbr_rows from MNR.XV__VALUES_2008_QUESTION UNION ALL

